[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "use kittycad::Client;\n\n// Authenticate via an API token.\nlet client = Client::new(\"$TOKEN\");\n\n// - OR -\n\n// Authenticate with your token and host parsed from the environment variables:\n// `KITTYCAD_API_TOKEN`.\nlet client = Client::new_from_env();",
      "install": "[dependencies]\nkittycad = \"0.1.8\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1/get/x-rust",
    "value": {
      "example": "/// Get OpenAPI schema.\nasyncfnexample_get_schema()->Result<()>{letresult:serde_json::Value=client.meta().get_schema().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/meta/struct.Meta.html#method.get_schema"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1_meta~1info/get/x-rust",
    "value": {
      "example": "/// Get the metadata about our currently running server.\n\nThis includes information on any of our other distributed systems it is connected to.\nYou must be a KittyCAD employee to perform this request.\nasyncfnexample_get_metadata()->Result<()>{letresult:crate::types::Metadata=client.meta().get_metadata().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/meta/struct.Meta.html#method.get_metadata"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-call-metrics/get/x-rust",
    "value": {
      "example": "/// Get API call metrics.\n\nThis endpoint requires authentication by a KittyCAD employee. The API calls are grouped by the parameter passed.\nasyncfnexample_get_api_call_metrics()->Result<()>{letresult:Vec<crate::types::ApiCallQueryGroup>=client.api_calls().get_api_call_metrics(group_by:group_by::Method,).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get_api_call_metrics"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-calls/get/x-rust",
    "value": {
      "example": "/// List API calls.\n\nThis endpoint requires authentication by a KittyCAD employee. The API calls are returned in order of creation, with the most recently created API calls first.\nasyncfnexample_list()->Result<()>{letresult:crate::types::ApiCallWithPriceResultsPage=client.api_calls().list(limit:Some(4asu32),page_token:Some(\"ayptr\"),sort_by:Some(sort_by::CreatedAtAscending),).await?;println!(\"{:?}\",result);Ok(())}\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nasyncfnexample_list_stream()->Result<()>{letstream=client.api_calls().list_stream(limit:Some(4asu32),sort_by:Some(sort_by::CreatedAtAscending));loop{matchstream.try_next().await{Ok(Some(item))=>{println!(\"{:?}\",item);}Ok(None)=>{break;}Err(err)=>{returnErr(err);},}}Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-calls~1{id}/get/x-rust",
    "value": {
      "example": "/// Get details of an API call.\n\nThis endpoint requires authentication by any KittyCAD user. It returns details of the requested API call for the user.\nIf the user is not authenticated to view the specified API call, then it is not returned.\nOnly KittyCAD employees can view API calls for other users.\nasyncfnexample_get_api_call()->Result<()>{letresult:crate::types::ApiCallWithPrice=client.api_calls().get_api_call(id:\"tsqqusf\",).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get_api_call"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1async~1operations/get/x-rust",
    "value": {
      "example": "/// List async operations.\n\nFor async file conversion operations, this endpoint does not return the contents of converted files (`output`). To get the contents use the `/async/operations/{id}` endpoint.\nThis endpoint requires authentication by a KittyCAD employee.\nasyncfnexample_list_async_operations()->Result<()>{letresult:crate::types::AsyncApiCallResultsPage=client.api_calls().list_async_operations(limit:Some(4asu32),page_token:Some(\"\"),sort_by:Some(sort_by::CreatedAtAscending),status:Some(status::Queued),).await?;println!(\"{:?}\",result);Ok(())}\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nasyncfnexample_list_async_operations_stream()->Result<()>{letstream=client.api_calls().list_async_operations_stream(limit:Some(4asu32),sort_by:Some(sort_by::CreatedAtAscending),status:Some(status::Queued));loop{matchstream.try_next().await{Ok(Some(item))=>{println!(\"{:?}\",item);}Ok(None)=>{break;}Err(err)=>{returnErr(err);},}}Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.list_async_operations"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1async~1operations~1{id}/get/x-rust",
    "value": {
      "example": "/// Get an async operation.\n\nGet the status and output of an async operation.\nThis endpoint requires authentication by any KittyCAD user. It returns details of the requested async operation for the user.\nIf the user is not authenticated to view the specified async operation, then it is not returned.\nOnly KittyCAD employees with the proper access can view async operations for other users.\nasyncfnexample_get_async_operation()->Result<()>{letresult:crate::types::AsyncApiCallOutput=client.api_calls().get_async_operation(id:\"pxhgytug\",).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get_async_operation"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1auth~1email/post/x-rust",
    "value": {
      "example": "/// Create an email verification request for a user.\nasyncfnexample_listen_auth_email()->Result<()>{letresult:crate::types::VerificationToken=client.hidden().listen_auth_email(body:&crate::types::EmailAuthenticationForm{callback_url:url::Url::from_str(\"http://149.225.166.134.170/4\")?,email:\"228.84.102.163.20.188.163.161@51.194.88.241.53.212.252.18.135.142.98.201.133\"}).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/hidden/struct.Hidden.html#method.listen_auth_email"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1auth~1email~1callback/get/x-rust",
    "value": {
      "example": "/// Listen for callbacks for email verification for users.\nasyncfnexample_listen_auth_email_callback()->Result<()>{client.hidden().listen_auth_email_callback(callback_url:Some(url::Url::from_str(\"http://68.4.121.131/2\")?),email:\"203.196.65.226.158.51.218.185.245.91.130.43@139.44.39.183.35.115.219.167.26.50.84\",token:\"gusrkgr\",).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/hidden/struct.Hidden.html#method.listen_auth_email_callback"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1conversion~1{src_format}~1{output_format}/post/x-rust",
    "value": {
      "example": "/// Convert CAD file.\n\nConvert a CAD file from one format to another. If the file being converted is larger than 25MB, it will be performed asynchronously.\nIf the conversion is performed synchronously, the contents of the converted file (`output`) will be returned as a base64 encoded string.\nIf the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\nasyncfnexample_create_conversion()->Result<()>{letresult:crate::types::FileConversion=client.file().create_conversion(output_format:output_format::Step,src_format:src_format::Obj,body:&\"kFiQWgER0_hm30jqc3Q\").await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1conversions~1{id}/get/x-rust",
    "value": {
      "example": "/// Get a file conversion.\n\nGet the status and output of an async file conversion.\nThis endpoint requires authentication by any KittyCAD user. It returns details of the requested file conversion for the user.\nIf the user is not authenticated to view the specified file conversion, then it is not returned.\nOnly KittyCAD employees with the proper access can view file conversions for other users.\nasyncfnexample_get_conversion()->Result<()>{letresult:crate::types::AsyncApiCallOutput=client.file().get_conversion(id:\"m\",).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.get_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1density/post/x-rust",
    "value": {
      "example": "/// Get CAD file density.\n\nGet the density of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\nIf the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\nasyncfnexample_create_density()->Result<()>{letresult:crate::types::FileDensity=client.file().create_density(material_mass:3.14asf64,src_format:src_format::Obj,body:&\"Rpuftm37ii6igDpUHQ\").await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_density"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1execute~1{lang}/post/x-rust",
    "value": {
      "example": "/// Execute a KittyCAD program in a specific language.\nasyncfnexample_create_execution()->Result<()>{letresult:crate::types::CodeOutput=client.file().create_execution(lang:lang::Python,output:Some(\"\"),body:&\"qk8f_950PbA\").await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_execution"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1mass/post/x-rust",
    "value": {
      "example": "/// Get CAD file mass.\n\nGet the mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\nIf the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\nasyncfnexample_create_mass()->Result<()>{letresult:crate::types::FileMass=client.file().create_mass(material_density:3.14asf64,src_format:src_format::Obj,body:&\"5wmXnui08hQXkeAaQA\").await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_mass"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1volume/post/x-rust",
    "value": {
      "example": "/// Get CAD file volume.\n\nGet the volume of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\nIf the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\nasyncfnexample_create_volume()->Result<()>{letresult:crate::types::FileVolume=client.file().create_volume(src_format:src_format::Dae,body:&\"et9pVt1uheVv1-D2\").await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_volume"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1logout/post/x-rust",
    "value": {
      "example": "/// This endpoint removes the session cookie for a user.\n\nThis is used in logout scenarios.\nasyncfnexample_logout()->Result<()>{client.hidden().logout().await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/hidden/struct.Hidden.html#method.logout"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1auth/post/x-rust",
    "value": {
      "example": "/// Start an OAuth 2.0 Device Authorization Grant.\n\nThis endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.\nasyncfnexample_device_auth_request()->Result<()>{client.oauth2().device_auth_request(body:&crate::types::DeviceAuthRequestForm{client_id:uuid::Uuid::from_str(\"771e05eb-5d63-4c84-a0e0-3670bb62ded7\")?}).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_auth_request"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1confirm/post/x-rust",
    "value": {
      "example": "/// Confirm an OAuth 2.0 Device Authorization Grant.\n\nThis endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/oauth2/device/token`.\nasyncfnexample_device_auth_confirm()->Result<()>{client.oauth2().device_auth_confirm(body:&crate::types::DeviceAuthVerifyParams{user_code:\"krggw\"}).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_auth_confirm"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1token/post/x-rust",
    "value": {
      "example": "/// Request a device access token.\n\nThis endpoint should be polled by the client until the user code is verified and the grant is confirmed.\nasyncfnexample_device_access_token()->Result<()>{client.oauth2().device_access_token(body:&crate::types::DeviceAccessTokenRequestForm{client_id:uuid::Uuid::from_str(\"82701b38-db1f-42c4-aab6-9307a44ab9d3\")?,device_code:uuid::Uuid::from_str(\"35ec3db0-6e2a-4848-8e71-bb58dcc5679e\")?,grant_type:::UrnIetfParamsOauthGrantTypeDeviceCode}).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_access_token"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1verify/get/x-rust",
    "value": {
      "example": "/// Verify an OAuth 2.0 Device Authorization Grant.\n\nThis endpoint should be accessed in a full user agent (e.g., a browser). If the user is not logged in, we redirect them to the login page and use the `callback_url` parameter to get them to the UI verification form upon logging in. If they are logged in, we redirect them to the UI verification form on the website.\nasyncfnexample_device_auth_verify()->Result<()>{client.oauth2().device_auth_verify(user_code:\"\",).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_auth_verify"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1provider~1{provider}~1callback/get/x-rust",
    "value": {
      "example": "/// Listen for callbacks for the OAuth 2.0 provider.\nasyncfnexample_listen_provider_callback()->Result<()>{client.oauth2().listen_provider_callback(code:Some(\"ducmoikx\"),provider:provider::Github,state:Some(\"e\"),).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.listen_provider_callback"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1provider~1{provider}~1consent/get/x-rust",
    "value": {
      "example": "/// Get the consent URL and other information for the OAuth 2.0 provider.\nasyncfnexample_listen_provider_consent()->Result<()>{letresult:crate::types::Oauth2ClientInfo=client.oauth2().listen_provider_consent(callback_url:Some(\"a\"),provider:provider::Github,).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.listen_provider_consent"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1ping/get/x-rust",
    "value": {
      "example": "/// Return pong.\nasyncfnexample_ping()->Result<()>{letresult:crate::types::Pong=client.meta().ping().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/meta/struct.Meta.html#method.ping"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1{src_format}~1{output_format}/post/x-rust",
    "value": {
      "example": "/// Convert units.\n\nConvert a metric unit value to another metric unit value. This is a nice endpoint to use for helper functions.\nasyncfnexample_create_conversion()->Result<()>{letresult:crate::types::UnitConversion=client.unit().create_conversion(output_format:output_format::Mega,src_format:src_format::MetricUnit,value:3.14asf64,).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.create_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/delete/x-rust",
    "value": {
      "example": "/// Delete your user.\n\nThis endpoint requires authentication by any KittyCAD user. It deletes the authenticated user from KittyCAD's database.\nThis call will only succeed if all invoices associated with the user have been paid in full and there is no outstanding balance.\nasyncfnexample_delete_user_self()->Result<()>{client.users().delete_user_self().await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.delete_user_self"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/get/x-rust",
    "value": {
      "example": "/// Get your user.\n\nGet the user information for the authenticated user.\nAlternatively, you can also use the `/users/me` endpoint.\nasyncfnexample_get_user_self()->Result<()>{letresult:crate::types::User=client.users().get_user_self().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get_user_self"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/put/x-rust",
    "value": {
      "example": "/// Update your user.\n\nThis endpoint requires authentication by any KittyCAD user. It updates information about the authenticated user.\nasyncfnexample_update_user_self()->Result<()>{letresult:crate::types::User=client.users().update_user_self(body:&crate::types::UpdateUser{company:\"jjowdpy\",discord:\"m\",first_name:\"prxbwhbjj\",github:\"nfee\",last_name:\"xfqeyf\",phone:crate::types::phone_number::PhoneNumber::from_str(\"+1358-641-0820\")?}).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.update_user_self"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls/get/x-rust",
    "value": {
      "example": "/// List API calls for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It returns the API calls for the authenticated user.\nThe API calls are returned in order of creation, with the most recently created API calls first.\nasyncfnexample_user_list()->Result<()>{letresult:crate::types::ApiCallWithPriceResultsPage=client.api_calls().user_list(limit:Some(4asu32),page_token:Some(\"uddqwnki\"),sort_by:Some(sort_by::CreatedAtAscending),).await?;println!(\"{:?}\",result);Ok(())}\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nasyncfnexample_user_list_stream()->Result<()>{letstream=client.api_calls().user_list_stream(limit:Some(4asu32),sort_by:Some(sort_by::CreatedAtAscending));loop{matchstream.try_next().await{Ok(Some(item))=>{println!(\"{:?}\",item);}Ok(None)=>{break;}Err(err)=>{returnErr(err);},}}Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.user_list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls~1{id}/get/x-rust",
    "value": {
      "example": "/// Get an API call for a user.\n\nThis endpoint requires authentication by any KittyCAD user. It returns details of the requested API call for the user.\nasyncfnexample_get_api_call_for_user()->Result<()>{letresult:crate::types::ApiCallWithPrice=client.api_calls().get_api_call_for_user(id:\"apuf\",).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get_api_call_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/get/x-rust",
    "value": {
      "example": "/// List API tokens for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It returns the API tokens for the authenticated user.\nThe API tokens are returned in order of creation, with the most recently created API tokens first.\nasyncfnexample_list_for_user()->Result<()>{letresult:crate::types::ApiTokenResultsPage=client.api_tokens().list_for_user(limit:Some(4asu32),page_token:Some(\"gao\"),sort_by:Some(sort_by::CreatedAtAscending),).await?;println!(\"{:?}\",result);Ok(())}\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nasyncfnexample_list_for_user_stream()->Result<()>{letstream=client.api_tokens().list_for_user_stream(limit:Some(4asu32),sort_by:Some(sort_by::CreatedAtAscending));loop{matchstream.try_next().await{Ok(Some(item))=>{println!(\"{:?}\",item);}Ok(None)=>{break;}Err(err)=>{returnErr(err);},}}Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.list_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/post/x-rust",
    "value": {
      "example": "/// Create a new API token for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It creates a new API token for the authenticated user.\nasyncfnexample_create_api_token_for_user()->Result<()>{letresult:crate::types::ApiToken=client.api_tokens().create_api_token_for_user().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.create_api_token_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/delete/x-rust",
    "value": {
      "example": "/// Delete an API token for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It deletes the requested API token for the user.\nThis endpoint does not actually delete the API token from the database. It merely marks the token as invalid. We still want to keep the token in the database for historical purposes.\nasyncfnexample_delete_api_token_for_user()->Result<()>{client.api_tokens().delete_api_token_for_user(token:uuid::Uuid::from_str(\"a2e5e7d0-4953-434c-892e-d51e5b3d729c\")?,).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.delete_api_token_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/get/x-rust",
    "value": {
      "example": "/// Get an API token for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It returns details of the requested API token for the user.\nasyncfnexample_get_api_token_for_user()->Result<()>{letresult:crate::types::ApiToken=client.api_tokens().get_api_token_for_user(token:uuid::Uuid::from_str(\"192893fa-1023-483d-841f-8cc7bcf5b452\")?,).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.get_api_token_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1extended/get/x-rust",
    "value": {
      "example": "/// Get extended information about your user.\n\nGet the user information for the authenticated user.\nAlternatively, you can also use the `/users-extended/me` endpoint.\nasyncfnexample_get_user_self_extended()->Result<()>{letresult:crate::types::ExtendedUser=client.users().get_user_self_extended().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get_user_self_extended"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1file~1conversions~1{id}/get/x-rust",
    "value": {
      "example": "/// Get a file conversion for your user.\n\nGet the status and output of an async file conversion. If completed, the contents of the converted file (`output`) will be returned as a base64 encoded string.\nThis endpoint requires authentication by any KittyCAD user. It returns details of the requested file conversion for the user.\nasyncfnexample_get_conversion_for_user()->Result<()>{letresult:crate::types::AsyncApiCallOutput=client.file().get_conversion_for_user(id:\"rnsjywhe\",).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.get_conversion_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/delete/x-rust",
    "value": {
      "example": "/// Delete payment info for your user.\n\nThis includes billing address, phone, and name.\nThis endpoint requires authentication by any KittyCAD user. It deletes the payment information for the authenticated user.\nasyncfnexample_delete_payment_information_for_user()->Result<()>{client.payments().delete_payment_information_for_user().await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.delete_payment_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/get/x-rust",
    "value": {
      "example": "/// Get payment info about your user.\n\nThis includes billing address, phone, and name.\nThis endpoint requires authentication by any KittyCAD user. It gets the payment information for the authenticated user.\nasyncfnexample_get_payment_information_for_user()->Result<()>{letresult:crate::types::Customer=client.payments().get_payment_information_for_user().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.get_payment_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/post/x-rust",
    "value": {
      "example": "/// Create payment info for your user.\n\nThis includes billing address, phone, and name.\nThis endpoint requires authentication by any KittyCAD user. It creates the payment information for the authenticated user.\nasyncfnexample_create_payment_information_for_user()->Result<()>{letresult:crate::types::Customer=client.payments().create_payment_information_for_user(body:&crate::types::BillingInfo{address:{city:\"\",country:\"xyqxvibvl\",created_at:chrono::DateTime::<chrono::Utc>::parse_from_rfc3339(\"1941-12-08T04:08:07.994+00:00\")?,id:uuid::Uuid::from_str(\"6a81ae1a-28b6-4537-9b15-a8d1950a3799\")?,state:\"djo\",street1:\"t\",street2:\"tip\",updated_at:chrono::DateTime::<chrono::Utc>::parse_from_rfc3339(\"2035-05-01T21:31:08.544+00:00\")?,user_id:\"au\",zip:\"xfq\"},name:\"rcyc\",phone:crate::types::phone_number::PhoneNumber::from_str(\"+1840-825-8647\")?}).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.create_payment_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/put/x-rust",
    "value": {
      "example": "/// Update payment info for your user.\n\nThis includes billing address, phone, and name.\nThis endpoint requires authentication by any KittyCAD user. It updates the payment information for the authenticated user.\nasyncfnexample_update_payment_information_for_user()->Result<()>{letresult:crate::types::Customer=client.payments().update_payment_information_for_user(body:&crate::types::BillingInfo{address:{city:\"\",country:\"fnsr\",created_at:chrono::DateTime::<chrono::Utc>::parse_from_rfc3339(\"2011-02-25T03:11:11.892+00:00\")?,id:uuid::Uuid::from_str(\"7975b3ea-9442-4f43-bc73-f3b1836216c7\")?,state:\"siulinr\",street1:\"cibnqeiis\",street2:\"ooeg\",updated_at:chrono::DateTime::<chrono::Utc>::parse_from_rfc3339(\"2059-11-05T17:08:38.240+00:00\")?,user_id:\"mf\",zip:\"q\"},name:\"gt\",phone:crate::types::phone_number::PhoneNumber::from_str(\"+1280-126-1161\")?}).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.update_payment_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1balance/get/x-rust",
    "value": {
      "example": "/// Get balance for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It gets the balance information for the authenticated user.\nasyncfnexample_get_payment_balance_for_user()->Result<()>{letresult:crate::types::CustomerBalance=client.payments().get_payment_balance_for_user().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.get_payment_balance_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1intent/post/x-rust",
    "value": {
      "example": "/// Create a payment intent for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It creates a new payment intent for the authenticated user.\nasyncfnexample_create_payment_intent_for_user()->Result<()>{letresult:crate::types::PaymentIntent=client.payments().create_payment_intent_for_user().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.create_payment_intent_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1invoices/get/x-rust",
    "value": {
      "example": "/// List invoices for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It lists invoices for the authenticated user.\nasyncfnexample_list_invoices_for_user()->Result<()>{letresult:Vec<crate::types::Invoice>=client.payments().list_invoices_for_user().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.list_invoices_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1methods/get/x-rust",
    "value": {
      "example": "/// List payment methods for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It lists payment methods for the authenticated user.\nasyncfnexample_list_payment_methods_for_user()->Result<()>{letresult:Vec<crate::types::PaymentMethod>=client.payments().list_payment_methods_for_user().await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.list_payment_methods_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1methods~1{id}/delete/x-rust",
    "value": {
      "example": "/// Delete a payment method for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It deletes the specified payment method for the authenticated user.\nasyncfnexample_delete_payment_method_for_user()->Result<()>{client.payments().delete_payment_method_for_user(id:\"nhkmdopmi\",).await?;Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.delete_payment_method_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1session~1{token}/get/x-rust",
    "value": {
      "example": "/// Get a session for your user.\n\nThis endpoint requires authentication by any KittyCAD user. It returns details of the requested API token for the user.\nasyncfnexample_get_session_for_user()->Result<()>{letresult:crate::types::Session=client.sessions().get_session_for_user(token:uuid::Uuid::from_str(\"398bb946-b3cf-4a17-aec3-95d8ccb269a5\")?,).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/sessions/struct.Sessions.html#method.get_session_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users/get/x-rust",
    "value": {
      "example": "/// List users.\n\nThis endpoint required authentication by a KittyCAD employee. The users are returned in order of creation, with the most recently created users first.\nasyncfnexample_list()->Result<()>{letresult:crate::types::UserResultsPage=client.users().list(limit:Some(4asu32),page_token:Some(\"\"),sort_by:Some(sort_by::CreatedAtDescending),).await?;println!(\"{:?}\",result);Ok(())}\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nasyncfnexample_list_stream()->Result<()>{letstream=client.users().list_stream(limit:Some(4asu32),sort_by:Some(sort_by::CreatedAtDescending));loop{matchstream.try_next().await{Ok(Some(item))=>{println!(\"{:?}\",item);}Ok(None)=>{break;}Err(err)=>{returnErr(err);},}}Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users-extended/get/x-rust",
    "value": {
      "example": "/// List users with extended information.\n\nThis endpoint required authentication by a KittyCAD employee. The users are returned in order of creation, with the most recently created users first.\nasyncfnexample_list_extended()->Result<()>{letresult:crate::types::ExtendedUserResultsPage=client.users().list_extended(limit:Some(4asu32),page_token:Some(\"xo\"),sort_by:Some(sort_by::CreatedAtDescending),).await?;println!(\"{:?}\",result);Ok(())}\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nasyncfnexample_list_extended_stream()->Result<()>{letstream=client.users().list_extended_stream(limit:Some(4asu32),sort_by:Some(sort_by::CreatedAtDescending));loop{matchstream.try_next().await{Ok(Some(item))=>{println!(\"{:?}\",item);}Ok(None)=>{break;}Err(err)=>{returnErr(err);},}}Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.list_extended"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users-extended~1{id}/get/x-rust",
    "value": {
      "example": "/// Get extended information about a user.\n\nTo get information about yourself, use `/users-extended/me` as the endpoint. By doing so you will get the user information for the authenticated user.\nAlternatively, to get information about the authenticated user, use `/user/extended` endpoint.\nTo get information about any KittyCAD user, you must be a KittyCAD employee.\nasyncfnexample_get_user_extended()->Result<()>{letresult:crate::types::ExtendedUser=client.users().get_user_extended(id:\"wb\",).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get_user_extended"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users~1{id}/get/x-rust",
    "value": {
      "example": "/// Get a user.\n\nTo get information about yourself, use `/users/me` as the endpoint. By doing so you will get the user information for the authenticated user.\nAlternatively, to get information about the authenticated user, use `/user` endpoint.\nTo get information about any KittyCAD user, you must be a KittyCAD employee.\nasyncfnexample_get_user()->Result<()>{letresult:crate::types::User=client.users().get_user(id:\"walwwbgcl\",).await?;println!(\"{:?}\",result);Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users~1{id}~1api-calls/get/x-rust",
    "value": {
      "example": "/// List API calls for a user.\n\nThis endpoint requires authentication by any KittyCAD user. It returns the API calls for the authenticated user if \"me\" is passed as the user id.\nAlternatively, you can use the `/user/api-calls` endpoint to get the API calls for your user.\nIf the authenticated user is a KittyCAD employee, then the API calls are returned for the user specified by the user id.\nThe API calls are returned in order of creation, with the most recently created API calls first.\nasyncfnexample_list_for_user()->Result<()>{letresult:crate::types::ApiCallWithPriceResultsPage=client.api_calls().list_for_user(id:\"ljdegmuds\",limit:Some(4asu32),page_token:Some(\"qxwyclmuu\"),sort_by:Some(sort_by::CreatedAtAscending),).await?;println!(\"{:?}\",result);Ok(())}\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nasyncfnexample_list_for_user_stream()->Result<()>{letstream=client.api_calls().list_for_user_stream(id:\"ljdegmuds\",limit:Some(4asu32),sort_by:Some(sort_by::CreatedAtAscending));loop{matchstream.try_next().await{Ok(Some(item))=>{println!(\"{:?}\",item);}Ok(None)=>{break;}Err(err)=>{returnErr(err);},}}Ok(())}",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.list_for_user"
    }
  }
]