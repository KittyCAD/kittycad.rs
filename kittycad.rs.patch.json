[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "// Authenticate via an API token.\nlet client = kittycad::Client::new(\"$TOKEN\");\n\n// - OR -\n\n// Authenticate with your token and host parsed from the environment variables:\n// `KITTYCAD_API_TOKEN`.\nlet client = kittycad::Client::new_from_env();",
      "install": "[dependencies]\nkittycad = \"0.2.1\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1/get/x-rust",
    "value": {
      "example": "/// Get OpenAPI schema.\nasync fn example_meta_get_schema() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: serde_json::Value = client.meta().get_schema().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/meta/struct.Meta.html#method.get_schema"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1_meta~1info/get/x-rust",
    "value": {
      "example": "/// Get the metadata about our currently running server.\n/// \n/// This includes information on any of our other distributed systems it is connected to.\n/// You must be a KittyCAD employee to perform this request.\nasync fn example_meta_get_metadata() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::Metadata = client.meta().get_metadata().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/meta/struct.Meta.html#method.get_metadata"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-call-metrics/get/x-rust",
    "value": {
      "example": "/// Get API call metrics.\n/// \n/// This endpoint requires authentication by a KittyCAD employee. The API calls are grouped by the parameter passed.\n/// \n/// **Parameters:**\n/// \n/// - `group_by: crate::types::ApiCallQueryGroupBy`: What field to group the metrics by. (required)\nasync fn example_api_calls_get_metrics() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: Vec<kittycad::types::ApiCallQueryGroup> = client\n        .api_calls()\n        .get_metrics(kittycad::types::ApiCallQueryGroupBy::IpAddress)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get_metrics"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-calls/get/x-rust",
    "value": {
      "example": "/// List API calls.\n/// \n/// This endpoint requires authentication by a KittyCAD employee. The API calls are returned in order of creation, with the most recently created API calls first.\n/// \n/// **Parameters:**\n/// \n/// - `limit: Option<u32>`: Maximum number of items returned by a single call\n/// - `page_token: Option<String>`: Token returned by previous call to retrieve the subsequent page\n/// - `sort_by: Option<crate::types::CreatedAtSortMode>`\nasync fn example_api_calls_list() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiCallWithPriceResultsPage = client\n        .api_calls()\n        .list(\n            Some(4 as u32),\n            Some(\"some-string\".to_string()),\n            Some(kittycad::types::CreatedAtSortMode::CreatedAtDescending),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_api_calls_list_stream() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let mut api_calls = client.api_calls();\n    let mut stream = api_calls.list_stream(\n        Some(4 as u32),\n        Some(kittycad::types::CreatedAtSortMode::CreatedAtDescending),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-calls~1{id}/get/x-rust",
    "value": {
      "example": "/// Get details of an API call.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API call for the user.\n/// If the user is not authenticated to view the specified API call, then it is not returned.\n/// Only KittyCAD employees can view API calls for other users.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The ID of the API call. (required)\nasync fn example_api_calls_get() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiCallWithPrice = client.api_calls().get(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1apps~1github~1callback/get/x-rust",
    "value": {
      "example": "/// Listen for callbacks to GitHub app authentication.\n/// \n/// This is different than OAuth 2.0 authentication for users. This endpoint grants access for KittyCAD to access user's repos.\n/// The user doesn't need KittyCAD OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.\nasync fn example_apps_github_callback() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .apps()\n        .github_callback(&serde_json::Value::String(\"some-string\".to_string()))\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/apps/struct.Apps.html#method.github_callback"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1apps~1github~1consent/get/x-rust",
    "value": {
      "example": "/// Get the consent URL for GitHub app authentication.\n/// \n/// This is different than OAuth 2.0 authentication for users. This endpoint grants access for KittyCAD to access user's repos.\n/// The user doesn't need KittyCAD OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.\nasync fn example_apps_github_consent() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::AppClientInfo = client.apps().github_consent().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/apps/struct.Apps.html#method.github_consent"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1apps~1github~1webhook/post/x-rust",
    "value": {
      "example": "/// Listen for GitHub webhooks.\n/// \n/// These come from the GitHub app.\nasync fn example_apps_github_webhook() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .apps()\n        .github_webhook(&bytes::Bytes::from(\"some-string\"))\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/apps/struct.Apps.html#method.github_webhook"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1async~1operations/get/x-rust",
    "value": {
      "example": "/// List async operations.\n/// \n/// For async file conversion operations, this endpoint does not return the contents of converted files (`output`). To get the contents use the `/async/operations/{id}` endpoint.\n/// This endpoint requires authentication by a KittyCAD employee.\n/// \n/// **Parameters:**\n/// \n/// - `limit: Option<u32>`: Maximum number of items returned by a single call\n/// - `page_token: Option<String>`: Token returned by previous call to retrieve the subsequent page\n/// - `sort_by: Option<crate::types::CreatedAtSortMode>`\n/// - `status: Option<crate::types::ApiCallStatus>`: The status to filter by.\nasync fn example_api_calls_list_async_operations() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::AsyncApiCallResultsPage = client\n        .api_calls()\n        .list_async_operations(\n            Some(4 as u32),\n            Some(\"some-string\".to_string()),\n            Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n            Some(kittycad::types::ApiCallStatus::Failed),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_api_calls_list_async_operations_stream() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let mut api_calls = client.api_calls();\n    let mut stream = api_calls.list_async_operations_stream(\n        Some(4 as u32),\n        Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n        Some(kittycad::types::ApiCallStatus::Failed),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.list_async_operations"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1async~1operations~1{id}/get/x-rust",
    "value": {
      "example": "/// Get an async operation.\n/// \n/// Get the status and output of an async operation.\n/// This endpoint requires authentication by any KittyCAD user. It returns details of the requested async operation for the user.\n/// If the user is not authenticated to view the specified async operation, then it is not returned.\n/// Only KittyCAD employees with the proper access can view async operations for other users.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The ID of the async operation. (required)\nasync fn example_api_calls_get_async_operation() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::AsyncApiCallOutput = client\n        .api_calls()\n        .get_async_operation(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get_async_operation"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1auth~1email/post/x-rust",
    "value": {
      "example": "/// Create an email verification request for a user.\nuse std::str::FromStr;\nasync fn example_hidden_auth_email() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::VerificationToken = client\n        .hidden()\n        .auth_email(&kittycad::types::EmailAuthenticationForm {\n            callback_url: Some(url::Url::from_str(\"https://example.com/foo/bar\")?),\n            email: \"email@example.com\".to_string(),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/hidden/struct.Hidden.html#method.auth_email"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1auth~1email~1callback/get/x-rust",
    "value": {
      "example": "/// Listen for callbacks for email verification for users.\n/// \n/// **Parameters:**\n/// \n/// - `callback_url: Option<url::Url>`: The URL to redirect back to after we have authenticated.\n/// - `email: &'astr`: The user's email. (required)\n/// - `token: &'astr`: The verification token. (required)\nuse std::str::FromStr;\nasync fn example_hidden_auth_email_callback() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .hidden()\n        .auth_email_callback(\n            Some(url::Url::from_str(\"https://example.com/foo/bar\")?),\n            \"email@example.com\",\n            \"some-string\",\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/hidden/struct.Hidden.html#method.auth_email_callback"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1constant~1physics~1{constant}/get/x-rust",
    "value": {
      "example": "/// Get a physics constant.\n/// \n/// **Parameters:**\n/// \n/// - `constant: crate::types::PhysicsConstantName`: The constant to get. (required)\nasync fn example_constant_get_physics() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::PhysicsConstant = client\n        .constant()\n        .get_physics(kittycad::types::PhysicsConstantName::PlankConst)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/constant/struct.Constant.html#method.get_physics"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1center-of-mass/post/x-rust",
    "value": {
      "example": "/// Get CAD file center of mass.\n/// \n/// Get the center of mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n/// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n/// \n/// **Parameters:**\n/// \n/// - `material_density: f64`: The material density. (required)\n/// - `src_format: crate::types::FileSourceFormat`: The format of the file. (required)\nasync fn example_file_create_center_of_mass() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::FileCenterOfMass = client\n        .file()\n        .create_center_of_mass(\n            3.14 as f64,\n            kittycad::types::FileSourceFormat::Obj,\n            &bytes::Bytes::from(\"some-string\"),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_center_of_mass"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1conversion~1{src_format}~1{output_format}/post/x-rust",
    "value": {
      "example": "/// Convert CAD file.\n/// \n/// Convert a CAD file from one format to another. If the file being converted is larger than 25MB, it will be performed asynchronously.\n/// If the conversion is performed synchronously, the contents of the converted file (`output`) will be returned as a base64 encoded string.\n/// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::FileOutputFormat`: The format the file should be converted to. (required)\n/// - `src_format: crate::types::FileSourceFormat`: The format of the file to convert. (required)\nasync fn example_file_create_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::FileConversion = client\n        .file()\n        .create_conversion(\n            kittycad::types::FileOutputFormat::Fbx,\n            kittycad::types::FileSourceFormat::Dae,\n            &bytes::Bytes::from(\"some-string\"),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1conversions~1{id}/get/x-rust",
    "value": {
      "example": "/// Get a file conversion.\n/// \n/// Get the status and output of an async file conversion.\n/// This endpoint requires authentication by any KittyCAD user. It returns details of the requested file conversion for the user.\n/// If the user is not authenticated to view the specified file conversion, then it is not returned.\n/// Only KittyCAD employees with the proper access can view file conversions for other users.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The ID of the async operation. (required)\nasync fn example_file_get_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::AsyncApiCallOutput =\n        client.file().get_conversion(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.get_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1density/post/x-rust",
    "value": {
      "example": "/// Get CAD file density.\n/// \n/// Get the density of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n/// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n/// \n/// **Parameters:**\n/// \n/// - `material_mass: f64`: The material mass. (required)\n/// - `src_format: crate::types::FileSourceFormat`: The format of the file. (required)\nasync fn example_file_create_density() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::FileDensity = client\n        .file()\n        .create_density(\n            3.14 as f64,\n            kittycad::types::FileSourceFormat::Dae,\n            &bytes::Bytes::from(\"some-string\"),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_density"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1execute~1{lang}/post/x-rust",
    "value": {
      "example": "/// Execute a KittyCAD program in a specific language.\n/// \n/// **Parameters:**\n/// \n/// - `lang: crate::types::CodeLanguage`: The language of the code. (required)\n/// - `output: Option<String>`: The output file we want to get the contents for (the paths are relative to where in litterbox it is being run). You can denote more than one file with a comma separated list of string paths.\nasync fn example_file_create_execution() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::CodeOutput = client\n        .file()\n        .create_execution(\n            kittycad::types::CodeLanguage::Node,\n            Some(\"some-string\".to_string()),\n            &bytes::Bytes::from(\"some-string\"),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_execution"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1mass/post/x-rust",
    "value": {
      "example": "/// Get CAD file mass.\n/// \n/// Get the mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n/// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n/// \n/// **Parameters:**\n/// \n/// - `material_density: f64`: The material density. (required)\n/// - `src_format: crate::types::FileSourceFormat`: The format of the file. (required)\nasync fn example_file_create_mass() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::FileMass = client\n        .file()\n        .create_mass(\n            3.14 as f64,\n            kittycad::types::FileSourceFormat::Step,\n            &bytes::Bytes::from(\"some-string\"),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_mass"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1surface-area/post/x-rust",
    "value": {
      "example": "/// Get CAD file surface area.\n/// \n/// Get the surface area of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n/// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n/// \n/// **Parameters:**\n/// \n/// - `src_format: crate::types::FileSourceFormat`: The format of the file. (required)\nasync fn example_file_create_surface_area() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::FileSurfaceArea = client\n        .file()\n        .create_surface_area(\n            kittycad::types::FileSourceFormat::Dae,\n            &bytes::Bytes::from(\"some-string\"),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_surface_area"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1volume/post/x-rust",
    "value": {
      "example": "/// Get CAD file volume.\n/// \n/// Get the volume of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n/// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n/// \n/// **Parameters:**\n/// \n/// - `src_format: crate::types::FileSourceFormat`: The format of the file. (required)\nasync fn example_file_create_volume() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::FileVolume = client\n        .file()\n        .create_volume(\n            kittycad::types::FileSourceFormat::Step,\n            &bytes::Bytes::from(\"some-string\"),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.create_volume"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1logout/post/x-rust",
    "value": {
      "example": "/// This endpoint removes the session cookie for a user.\n/// \n/// This is used in logout scenarios.\nasync fn example_hidden_logout() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client.hidden().logout().await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/hidden/struct.Hidden.html#method.logout"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1auth/post/x-rust",
    "value": {
      "example": "/// Start an OAuth 2.0 Device Authorization Grant.\n/// \n/// This endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.\nuse std::str::FromStr;\nasync fn example_oauth2_device_auth_request() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .oauth2()\n        .device_auth_request(&kittycad::types::DeviceAuthRequestForm {\n            client_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_auth_request"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1confirm/post/x-rust",
    "value": {
      "example": "/// Confirm an OAuth 2.0 Device Authorization Grant.\n/// \n/// This endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/oauth2/device/token`.\nasync fn example_oauth2_device_auth_confirm() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .oauth2()\n        .device_auth_confirm(&kittycad::types::DeviceAuthVerifyParams {\n            user_code: \"some-string\".to_string(),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_auth_confirm"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1token/post/x-rust",
    "value": {
      "example": "/// Request a device access token.\n/// \n/// This endpoint should be polled by the client until the user code is verified and the grant is confirmed.\nuse std::str::FromStr;\nasync fn example_oauth2_device_access_token() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .oauth2()\n        .device_access_token(&kittycad::types::DeviceAccessTokenRequestForm {\n            client_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            device_code: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            grant_type: kittycad::types::Oauth2GrantType::UrnIetfParamsOauthGrantTypeDeviceCode,\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_access_token"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1verify/get/x-rust",
    "value": {
      "example": "/// Verify an OAuth 2.0 Device Authorization Grant.\n/// \n/// This endpoint should be accessed in a full user agent (e.g., a browser). If the user is not logged in, we redirect them to the login page and use the `callback_url` parameter to get them to the UI verification form upon logging in. If they are logged in, we redirect them to the UI verification form on the website.\n/// \n/// **Parameters:**\n/// \n/// - `user_code: &'astr`: The user code. (required)\nasync fn example_oauth2_device_auth_verify() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client.oauth2().device_auth_verify(\"some-string\").await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.device_auth_verify"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1provider~1{provider}~1callback/get/x-rust",
    "value": {
      "example": "/// Listen for callbacks for the OAuth 2.0 provider.\n/// \n/// **Parameters:**\n/// \n/// - `code: Option<String>`: The authorization code.\n/// - `provider: crate::types::AccountProvider`: The provider. (required)\n/// - `state: Option<String>`: The state that we had passed in through the user consent URL.\nasync fn example_oauth2_oauth_2_provider_callback() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .oauth2()\n        .oauth_2_provider_callback(\n            Some(\"some-string\".to_string()),\n            kittycad::types::AccountProvider::Github,\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.oauth_2_provider_callback"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1provider~1{provider}~1consent/get/x-rust",
    "value": {
      "example": "/// Get the consent URL and other information for the OAuth 2.0 provider.\n/// \n/// **Parameters:**\n/// \n/// - `callback_url: Option<String>`: The URL to redirect back to after we have authenticated.\n/// - `provider: crate::types::AccountProvider`: The provider. (required)\nasync fn example_oauth2_oauth_2_provider_consent() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::Oauth2ClientInfo = client\n        .oauth2()\n        .oauth_2_provider_consent(\n            Some(\"some-string\".to_string()),\n            kittycad::types::AccountProvider::Github,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/oauth2/struct.Oauth2.html#method.oauth_2_provider_consent"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1ping/get/x-rust",
    "value": {
      "example": "/// Return pong.\nasync fn example_meta_ping() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::Pong = client.meta().ping().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/meta/struct.Meta.html#method.ping"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1acceleration~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert acceleration units.\n/// \n/// Convert an acceleration unit value to another acceleration unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitAccelerationFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitAccelerationFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_acceleration_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitAccelerationConversion = client\n        .unit()\n        .get_acceleration_conversion(\n            kittycad::types::UnitAccelerationFormat::MetersPerSecondSquared,\n            kittycad::types::UnitAccelerationFormat::MetersPerSecondSquared,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_acceleration_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1angle~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert angle units.\n/// \n/// Convert an angle unit value to another angle unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitAngleFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitAngleFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_angle_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitAngleConversion = client\n        .unit()\n        .get_angle_conversion(\n            kittycad::types::UnitAngleFormat::Arcsecond,\n            kittycad::types::UnitAngleFormat::Arcminute,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_angle_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1angular-velocity~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert angular velocity units.\n/// \n/// Convert an angular velocity unit value to another angular velocity unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitAngularVelocityFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitAngularVelocityFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_angular_velocity_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitAngularVelocityConversion = client\n        .unit()\n        .get_angular_velocity_conversion(\n            kittycad::types::UnitAngularVelocityFormat::RadiansPerSecond,\n            kittycad::types::UnitAngularVelocityFormat::RevolutionsPerMinute,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_angular_velocity_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1area~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert area units.\n/// \n/// Convert an area unit value to another area unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitAreaFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitAreaFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_area_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitAreaConversion = client\n        .unit()\n        .get_area_conversion(\n            kittycad::types::UnitAreaFormat::SquareFoot,\n            kittycad::types::UnitAreaFormat::Hectare,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_area_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1charge~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert charge units.\n/// \n/// Convert a charge unit value to another charge unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitChargeFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitChargeFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_charge_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitChargeConversion = client\n        .unit()\n        .get_charge_conversion(\n            kittycad::types::UnitChargeFormat::AmpereHour,\n            kittycad::types::UnitChargeFormat::AmpereHour,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_charge_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1concentration~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert concentration units.\n/// \n/// Convert a concentration unit value to another concentration unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitConcentrationFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitConcentrationFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_concentration_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitConcentrationConversion = client\n        .unit()\n        .get_concentration_conversion(\n            kittycad::types::UnitConcentrationFormat::PartsPerMillion,\n            kittycad::types::UnitConcentrationFormat::Percent,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_concentration_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1data-transfer-rate~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert data transfer rate units.\n/// \n/// Convert a data transfer rate unit value to another data transfer rate unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitDataTransferRateFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitDataTransferRateFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_data_transfer_rate_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitDataTransferRateConversion = client\n        .unit()\n        .get_data_transfer_rate_conversion(\n            kittycad::types::UnitDataTransferRateFormat::ExabitsPerSecond,\n            kittycad::types::UnitDataTransferRateFormat::ExabitsPerSecond,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_data_transfer_rate_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1data~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert data units.\n/// \n/// Convert a data unit value to another data unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitDataFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitDataFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_data_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitDataConversion = client\n        .unit()\n        .get_data_conversion(\n            kittycad::types::UnitDataFormat::Byte,\n            kittycad::types::UnitDataFormat::Exabit,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_data_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1density~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert density units.\n/// \n/// Convert a density unit value to another density unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitDensityFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitDensityFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_density_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitDensityConversion = client\n        .unit()\n        .get_density_conversion(\n            kittycad::types::UnitDensityFormat::PoundsPerCubicFoot,\n            kittycad::types::UnitDensityFormat::PoundsPerGallon,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_density_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1energy~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert energy units.\n/// \n/// Convert a energy unit value to another energy unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitEnergyFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitEnergyFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_energy_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitEnergyConversion = client\n        .unit()\n        .get_energy_conversion(\n            kittycad::types::UnitEnergyFormat::BritishThermalUnitIso,\n            kittycad::types::UnitEnergyFormat::BritishThermalUnit59,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_energy_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1force~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert force units.\n/// \n/// Convert a force unit value to another force unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitForceFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitForceFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_force_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitForceConversion = client\n        .unit()\n        .get_force_conversion(\n            kittycad::types::UnitForceFormat::Dyne,\n            kittycad::types::UnitForceFormat::Poundal,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_force_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1illuminance~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert illuminance units.\n/// \n/// Convert a illuminance unit value to another illuminance unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitIlluminanceFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitIlluminanceFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_illuminance_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitIlluminanceConversion = client\n        .unit()\n        .get_illuminance_conversion(\n            kittycad::types::UnitIlluminanceFormat::Footcandle,\n            kittycad::types::UnitIlluminanceFormat::Footcandle,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_illuminance_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1length~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert length units.\n/// \n/// Convert a length unit value to another length unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitLengthFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitLengthFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_length_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitLengthConversion = client\n        .unit()\n        .get_length_conversion(\n            kittycad::types::UnitLengthFormat::Foot,\n            kittycad::types::UnitLengthFormat::Yard,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_length_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1magnetic-field-strength~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert magnetic field strength units.\n/// \n/// Convert a magnetic field strength unit value to another magnetic field strength unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitMagneticFieldStrengthFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitMagneticFieldStrengthFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_magnetic_field_strength_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitMagneticFieldStrengthConversion = client\n        .unit()\n        .get_magnetic_field_strength_conversion(\n            kittycad::types::UnitMagneticFieldStrengthFormat::Tesla,\n            kittycad::types::UnitMagneticFieldStrengthFormat::Gauss,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_magnetic_field_strength_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1magnetic-flux~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert magnetic flux units.\n/// \n/// Convert a magnetic flux unit value to another magnetic flux unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitMagneticFluxFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitMagneticFluxFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_magnetic_flux_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitMagneticFluxConversion = client\n        .unit()\n        .get_magnetic_flux_conversion(\n            kittycad::types::UnitMagneticFluxFormat::Weber,\n            kittycad::types::UnitMagneticFluxFormat::Weber,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_magnetic_flux_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1mass~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert mass units.\n/// \n/// Convert a mass unit value to another mass unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitMassFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitMassFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_mass_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitMassConversion = client\n        .unit()\n        .get_mass_conversion(\n            kittycad::types::UnitMassFormat::Kilogram,\n            kittycad::types::UnitMassFormat::LongTon,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_mass_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1metric~1cubed~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert metric cubed units.\n/// \n/// Convert a metric cubed unit value to another metric cubed unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitMetricPower`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitMetricPower`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_metric_power_cubed_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitMetricPowerCubedConversion = client\n        .unit()\n        .get_metric_power_cubed_conversion(\n            kittycad::types::UnitMetricPower::Deca,\n            kittycad::types::UnitMetricPower::MetricUnit,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_metric_power_cubed_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1metric~1power~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert metric units.\n/// \n/// Convert a metric unit value to another metric unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitMetricPower`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitMetricPower`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_metric_power_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitMetricPowerConversion = client\n        .unit()\n        .get_metric_power_conversion(\n            kittycad::types::UnitMetricPower::Tera,\n            kittycad::types::UnitMetricPower::MetricUnit,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_metric_power_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1metric~1squared~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert metric squared units.\n/// \n/// Convert a metric squared unit value to another metric squared unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitMetricPower`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitMetricPower`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_metric_power_squared_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitMetricPowerSquaredConversion = client\n        .unit()\n        .get_metric_power_squared_conversion(\n            kittycad::types::UnitMetricPower::Centi,\n            kittycad::types::UnitMetricPower::Pico,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_metric_power_squared_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1power~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert power units.\n/// \n/// Convert a power unit value to another power unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitPowerFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitPowerFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_power_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitPowerConversion = client\n        .unit()\n        .get_power_conversion(\n            kittycad::types::UnitPowerFormat::Watt,\n            kittycad::types::UnitPowerFormat::Watt,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_power_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1pressure~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert pressure units.\n/// \n/// Convert a pressure unit value to another pressure unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitPressureFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitPressureFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_pressure_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitPressureConversion = client\n        .unit()\n        .get_pressure_conversion(\n            kittycad::types::UnitPressureFormat::Mbar,\n            kittycad::types::UnitPressureFormat::Bar,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_pressure_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1radiation~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert radiation units.\n/// \n/// Convert a radiation unit value to another radiation unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitRadiationFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitRadiationFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_radiation_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitRadiationConversion = client\n        .unit()\n        .get_radiation_conversion(\n            kittycad::types::UnitRadiationFormat::Gray,\n            kittycad::types::UnitRadiationFormat::Rad,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_radiation_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1solid-angle~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert solid angle units.\n/// \n/// Convert a solid angle unit value to another solid angle unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitSolidAngleFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitSolidAngleFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_solid_angle_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitSolidAngleConversion = client\n        .unit()\n        .get_solid_angle_conversion(\n            kittycad::types::UnitSolidAngleFormat::Spat,\n            kittycad::types::UnitSolidAngleFormat::Steradian,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_solid_angle_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1temperature~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert temperature units.\n/// \n/// Convert a temperature unit value to another temperature unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitTemperatureFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitTemperatureFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_temperature_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitTemperatureConversion = client\n        .unit()\n        .get_temperature_conversion(\n            kittycad::types::UnitTemperatureFormat::Fahrenheit,\n            kittycad::types::UnitTemperatureFormat::Celsius,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_temperature_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1time~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert time units.\n/// \n/// Convert a time unit value to another time unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitTimeFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitTimeFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_time_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitTimeConversion = client\n        .unit()\n        .get_time_conversion(\n            kittycad::types::UnitTimeFormat::Second,\n            kittycad::types::UnitTimeFormat::Day,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_time_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1velocity~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert velocity units.\n/// \n/// Convert a velocity unit value to another velocity unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitVelocityFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitVelocityFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_velocity_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitVelocityConversion = client\n        .unit()\n        .get_velocity_conversion(\n            kittycad::types::UnitVelocityFormat::Knot,\n            kittycad::types::UnitVelocityFormat::MilesPerHour,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_velocity_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1voltage~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert voltage units.\n/// \n/// Convert a voltage unit value to another voltage unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitVoltageFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitVoltageFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_voltage_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitVoltageConversion = client\n        .unit()\n        .get_voltage_conversion(\n            kittycad::types::UnitVoltageFormat::Abvolt,\n            kittycad::types::UnitVoltageFormat::Volt,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_voltage_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1volume~1{src_format}~1{output_format}/get/x-rust",
    "value": {
      "example": "/// Convert volume units.\n/// \n/// Convert a volume unit value to another volume unit value. This is a nice endpoint to use for helper functions.\n/// \n/// **Parameters:**\n/// \n/// - `output_format: crate::types::UnitVolumeFormat`: The output format of the unit. (required)\n/// - `src_format: crate::types::UnitVolumeFormat`: The source format of the unit. (required)\n/// - `value: f64`: The initial value. (required)\nasync fn example_unit_get_volume_conversion() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UnitVolumeConversion = client\n        .unit()\n        .get_volume_conversion(\n            kittycad::types::UnitVolumeFormat::CubicYard,\n            kittycad::types::UnitVolumeFormat::CubicYard,\n            3.14 as f64,\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/unit/struct.Unit.html#method.get_volume_conversion"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/delete/x-rust",
    "value": {
      "example": "/// Delete your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It deletes the authenticated user from KittyCAD's database.\n/// This call will only succeed if all invoices associated with the user have been paid in full and there is no outstanding balance.\nasync fn example_users_delete_self() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client.users().delete_self().await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.delete_self"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/get/x-rust",
    "value": {
      "example": "/// Get your user.\n/// \n/// Get the user information for the authenticated user.\n/// Alternatively, you can also use the `/users/me` endpoint.\nasync fn example_users_get_self() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::User = client.users().get_self().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get_self"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/put/x-rust",
    "value": {
      "example": "/// Update your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It updates information about the authenticated user.\nuse std::str::FromStr;\nasync fn example_users_update_self() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::User = client\n        .users()\n        .update_self(&kittycad::types::UpdateUser {\n            company: Some(\"some-string\".to_string()),\n            discord: Some(\"some-string\".to_string()),\n            first_name: Some(\"some-string\".to_string()),\n            github: Some(\"some-string\".to_string()),\n            last_name: Some(\"some-string\".to_string()),\n            phone: kittycad::types::phone_number::PhoneNumber::from_str(\"+1555-555-5555\")?,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.update_self"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls/get/x-rust",
    "value": {
      "example": "/// List API calls for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It returns the API calls for the authenticated user.\n/// The API calls are returned in order of creation, with the most recently created API calls first.\n/// \n/// **Parameters:**\n/// \n/// - `limit: Option<u32>`: Maximum number of items returned by a single call\n/// - `page_token: Option<String>`: Token returned by previous call to retrieve the subsequent page\n/// - `sort_by: Option<crate::types::CreatedAtSortMode>`\nasync fn example_api_calls_user_list() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiCallWithPriceResultsPage = client\n        .api_calls()\n        .user_list(\n            Some(4 as u32),\n            Some(\"some-string\".to_string()),\n            Some(kittycad::types::CreatedAtSortMode::CreatedAtDescending),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_api_calls_user_list_stream() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let mut api_calls = client.api_calls();\n    let mut stream = api_calls.user_list_stream(\n        Some(4 as u32),\n        Some(kittycad::types::CreatedAtSortMode::CreatedAtDescending),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.user_list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls~1{id}/get/x-rust",
    "value": {
      "example": "/// Get an API call for a user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API call for the user.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The ID of the API call. (required)\nasync fn example_api_calls_get_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiCallWithPrice =\n        client.api_calls().get_for_user(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.get_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/get/x-rust",
    "value": {
      "example": "/// List API tokens for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It returns the API tokens for the authenticated user.\n/// The API tokens are returned in order of creation, with the most recently created API tokens first.\n/// \n/// **Parameters:**\n/// \n/// - `limit: Option<u32>`: Maximum number of items returned by a single call\n/// - `page_token: Option<String>`: Token returned by previous call to retrieve the subsequent page\n/// - `sort_by: Option<crate::types::CreatedAtSortMode>`\nasync fn example_api_tokens_list_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiTokenResultsPage = client\n        .api_tokens()\n        .list_for_user(\n            Some(4 as u32),\n            Some(\"some-string\".to_string()),\n            Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_api_tokens_list_for_user_stream() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let mut api_tokens = client.api_tokens();\n    let mut stream = api_tokens.list_for_user_stream(\n        Some(4 as u32),\n        Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.list_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/post/x-rust",
    "value": {
      "example": "/// Create a new API token for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It creates a new API token for the authenticated user.\nasync fn example_api_tokens_create_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiToken = client.api_tokens().create_for_user().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.create_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/delete/x-rust",
    "value": {
      "example": "/// Delete an API token for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It deletes the requested API token for the user.\n/// This endpoint does not actually delete the API token from the database. It merely marks the token as invalid. We still want to keep the token in the database for historical purposes.\n/// \n/// **Parameters:**\n/// \n/// - `token: uuid::Uuid`: The API token. (required)\nuse std::str::FromStr;\nasync fn example_api_tokens_delete_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .api_tokens()\n        .delete_for_user(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.delete_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/get/x-rust",
    "value": {
      "example": "/// Get an API token for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API token for the user.\n/// \n/// **Parameters:**\n/// \n/// - `token: uuid::Uuid`: The API token. (required)\nuse std::str::FromStr;\nasync fn example_api_tokens_get_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiToken = client\n        .api_tokens()\n        .get_for_user(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_tokens/struct.ApiTokens.html#method.get_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1extended/get/x-rust",
    "value": {
      "example": "/// Get extended information about your user.\n/// \n/// Get the user information for the authenticated user.\n/// Alternatively, you can also use the `/users-extended/me` endpoint.\nasync fn example_users_get_self_extended() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ExtendedUser = client.users().get_self_extended().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get_self_extended"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1file~1conversions~1{id}/get/x-rust",
    "value": {
      "example": "/// Get a file conversion for your user.\n/// \n/// Get the status and output of an async file conversion. If completed, the contents of the converted file (`output`) will be returned as a base64 encoded string.\n/// This endpoint requires authentication by any KittyCAD user. It returns details of the requested file conversion for the user.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The ID of the async operation. (required)\nasync fn example_file_get_conversion_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::AsyncApiCallOutput =\n        client.file().get_conversion_for_user(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/file/struct.File.html#method.get_conversion_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/delete/x-rust",
    "value": {
      "example": "/// Delete payment info for your user.\n/// \n/// This includes billing address, phone, and name.\n/// This endpoint requires authentication by any KittyCAD user. It deletes the payment information for the authenticated user.\nasync fn example_payments_delete_information_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client.payments().delete_information_for_user().await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.delete_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/get/x-rust",
    "value": {
      "example": "/// Get payment info about your user.\n/// \n/// This includes billing address, phone, and name.\n/// This endpoint requires authentication by any KittyCAD user. It gets the payment information for the authenticated user.\nasync fn example_payments_get_information_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::Customer = client.payments().get_information_for_user().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.get_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/post/x-rust",
    "value": {
      "example": "/// Create payment info for your user.\n/// \n/// This includes billing address, phone, and name.\n/// This endpoint requires authentication by any KittyCAD user. It creates the payment information for the authenticated user.\nuse std::str::FromStr;\nasync fn example_payments_create_information_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::Customer = client\n        .payments()\n        .create_information_for_user(&kittycad::types::BillingInfo {\n            address: Some(kittycad::types::NewAddress {\n                city: Some(\"some-string\".to_string()),\n                country: Some(\"some-string\".to_string()),\n                state: Some(\"some-string\".to_string()),\n                street_1: Some(\"some-string\".to_string()),\n                street_2: Some(\"some-string\".to_string()),\n                user_id: Some(\"some-string\".to_string()),\n                zip: Some(\"some-string\".to_string()),\n            }),\n            name: Some(\"some-string\".to_string()),\n            phone: kittycad::types::phone_number::PhoneNumber::from_str(\"+1555-555-5555\")?,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.create_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/put/x-rust",
    "value": {
      "example": "/// Update payment info for your user.\n/// \n/// This includes billing address, phone, and name.\n/// This endpoint requires authentication by any KittyCAD user. It updates the payment information for the authenticated user.\nuse std::str::FromStr;\nasync fn example_payments_update_information_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::Customer = client\n        .payments()\n        .update_information_for_user(&kittycad::types::BillingInfo {\n            address: Some(kittycad::types::NewAddress {\n                city: Some(\"some-string\".to_string()),\n                country: Some(\"some-string\".to_string()),\n                state: Some(\"some-string\".to_string()),\n                street_1: Some(\"some-string\".to_string()),\n                street_2: Some(\"some-string\".to_string()),\n                user_id: Some(\"some-string\".to_string()),\n                zip: Some(\"some-string\".to_string()),\n            }),\n            name: Some(\"some-string\".to_string()),\n            phone: kittycad::types::phone_number::PhoneNumber::from_str(\"+1555-555-5555\")?,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.update_information_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1balance/get/x-rust",
    "value": {
      "example": "/// Get balance for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It gets the balance information for the authenticated user.\nasync fn example_payments_get_balance_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::CustomerBalance = client.payments().get_balance_for_user().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.get_balance_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1intent/post/x-rust",
    "value": {
      "example": "/// Create a payment intent for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It creates a new payment intent for the authenticated user.\nasync fn example_payments_create_intent_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::PaymentIntent = client.payments().create_intent_for_user().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.create_intent_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1invoices/get/x-rust",
    "value": {
      "example": "/// List invoices for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It lists invoices for the authenticated user.\nasync fn example_payments_list_invoices_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: Vec<kittycad::types::Invoice> = client.payments().list_invoices_for_user().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.list_invoices_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1methods/get/x-rust",
    "value": {
      "example": "/// List payment methods for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It lists payment methods for the authenticated user.\nasync fn example_payments_list_methods_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: Vec<kittycad::types::PaymentMethod> =\n        client.payments().list_methods_for_user().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.list_methods_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1methods~1{id}/delete/x-rust",
    "value": {
      "example": "/// Delete a payment method for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It deletes the specified payment method for the authenticated user.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The ID of the payment method. (required)\nasync fn example_payments_delete_method_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    client\n        .payments()\n        .delete_method_for_user(\"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/payments/struct.Payments.html#method.delete_method_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1session~1{token}/get/x-rust",
    "value": {
      "example": "/// Get a session for your user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API token for the user.\n/// \n/// **Parameters:**\n/// \n/// - `token: uuid::Uuid`: The API token. (required)\nuse std::str::FromStr;\nasync fn example_sessions_get_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::Session = client\n        .sessions()\n        .get_for_user(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/sessions/struct.Sessions.html#method.get_for_user"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users/get/x-rust",
    "value": {
      "example": "/// List users.\n/// \n/// This endpoint required authentication by a KittyCAD employee. The users are returned in order of creation, with the most recently created users first.\n/// \n/// **Parameters:**\n/// \n/// - `limit: Option<u32>`: Maximum number of items returned by a single call\n/// - `page_token: Option<String>`: Token returned by previous call to retrieve the subsequent page\n/// - `sort_by: Option<crate::types::CreatedAtSortMode>`\nasync fn example_users_list() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::UserResultsPage = client\n        .users()\n        .list(\n            Some(4 as u32),\n            Some(\"some-string\".to_string()),\n            Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_users_list_stream() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let mut users = client.users();\n    let mut stream = users.list_stream(\n        Some(4 as u32),\n        Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users-extended/get/x-rust",
    "value": {
      "example": "/// List users with extended information.\n/// \n/// This endpoint required authentication by a KittyCAD employee. The users are returned in order of creation, with the most recently created users first.\n/// \n/// **Parameters:**\n/// \n/// - `limit: Option<u32>`: Maximum number of items returned by a single call\n/// - `page_token: Option<String>`: Token returned by previous call to retrieve the subsequent page\n/// - `sort_by: Option<crate::types::CreatedAtSortMode>`\nasync fn example_users_list_extended() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ExtendedUserResultsPage = client\n        .users()\n        .list_extended(\n            Some(4 as u32),\n            Some(\"some-string\".to_string()),\n            Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_users_list_extended_stream() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let mut users = client.users();\n    let mut stream = users.list_extended_stream(\n        Some(4 as u32),\n        Some(kittycad::types::CreatedAtSortMode::CreatedAtAscending),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.list_extended"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users-extended~1{id}/get/x-rust",
    "value": {
      "example": "/// Get extended information about a user.\n/// \n/// To get information about yourself, use `/users-extended/me` as the endpoint. By doing so you will get the user information for the authenticated user.\n/// Alternatively, to get information about the authenticated user, use `/user/extended` endpoint.\n/// To get information about any KittyCAD user, you must be a KittyCAD employee.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The user ID. (required)\nasync fn example_users_get_extended() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ExtendedUser = client.users().get_extended(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get_extended"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users~1{id}/get/x-rust",
    "value": {
      "example": "/// Get a user.\n/// \n/// To get information about yourself, use `/users/me` as the endpoint. By doing so you will get the user information for the authenticated user.\n/// Alternatively, to get information about the authenticated user, use `/user` endpoint.\n/// To get information about any KittyCAD user, you must be a KittyCAD employee.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The user ID. (required)\nasync fn example_users_get() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::User = client.users().get(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/users/struct.Users.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users~1{id}~1api-calls/get/x-rust",
    "value": {
      "example": "/// List API calls for a user.\n/// \n/// This endpoint requires authentication by any KittyCAD user. It returns the API calls for the authenticated user if \"me\" is passed as the user id.\n/// Alternatively, you can use the `/user/api-calls` endpoint to get the API calls for your user.\n/// If the authenticated user is a KittyCAD employee, then the API calls are returned for the user specified by the user id.\n/// The API calls are returned in order of creation, with the most recently created API calls first.\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: The user ID. (required)\n/// - `limit: Option<u32>`: Maximum number of items returned by a single call\n/// - `page_token: Option<String>`: Token returned by previous call to retrieve the subsequent page\n/// - `sort_by: Option<crate::types::CreatedAtSortMode>`\nasync fn example_api_calls_list_for_user() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let result: kittycad::types::ApiCallWithPriceResultsPage = client\n        .api_calls()\n        .list_for_user(\n            \"some-string\",\n            Some(4 as u32),\n            Some(\"some-string\".to_string()),\n            Some(kittycad::types::CreatedAtSortMode::CreatedAtDescending),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_api_calls_list_for_user_stream() -> anyhow::Result<()> {\n    let client = kittycad::Client::new_from_env();\n    let mut api_calls = client.api_calls();\n    let mut stream = api_calls.list_for_user_stream(\n        \"some-string\",\n        Some(4 as u32),\n        Some(kittycad::types::CreatedAtSortMode::CreatedAtDescending),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/kittycad/latest/kittycad/api_calls/struct.ApiCalls.html#method.list_for_user"
    }
  }
]