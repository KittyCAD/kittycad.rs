#[doc = "The output from the async API call."]
#[derive(
    serde :: Serialize, serde :: Deserialize, PartialEq, Debug, Clone, schemars :: JsonSchema,
)]
#[cfg_attr(feature = "tabled", derive(tabled::Tabled))]
#[serde(tag = "type")]
pub enum AsyncApiCallOutput {
    #[doc = "A file conversion."]
    FileConversion {
        #[doc = "The time and date the API call was completed."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The time and date the API call was created."]
        created_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The error the function returned, if any."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        error: Option<String>,
        #[doc = "The unique identifier of the API call.\n\nThis is the same as the API call ID."]
        id: uuid::Uuid,
        #[doc = "The converted file, if completed, base64 encoded."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        output: Option<base64::Base64Data>,
        #[doc = "The output format of the file conversion."]
        output_format: FileExportFormat,
        #[doc = "The source format of the file conversion."]
        src_format: FileImportFormat,
        #[doc = "The time and date the API call was started."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The status of the API call."]
        status: ApiCallStatus,
        #[doc = "The time and date the API call was last updated."]
        updated_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The user ID of the user who created the API call."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        user_id: Option<String>,
    },
    #[doc = "File center of mass."]
    FileCenterOfMass {
        #[doc = "The resulting center of mass."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        center_of_mass: Option<Vec<f64>>,
        #[doc = "The time and date the API call was completed."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The time and date the API call was created."]
        created_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The error the function returned, if any."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        error: Option<String>,
        #[doc = "The unique identifier of the API call.\n\nThis is the same as the API call ID."]
        id: uuid::Uuid,
        #[doc = "The source format of the file."]
        src_format: FileImportFormat,
        #[doc = "The time and date the API call was started."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The status of the API call."]
        status: ApiCallStatus,
        #[doc = "The time and date the API call was last updated."]
        updated_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The user ID of the user who created the API call."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        user_id: Option<String>,
    },
    #[doc = "A file mass."]
    FileMass {
        #[doc = "The time and date the API call was completed."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The time and date the API call was created."]
        created_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The error the function returned, if any."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        error: Option<String>,
        #[doc = "The unique identifier of the API call.\n\nThis is the same as the API call ID."]
        id: uuid::Uuid,
        #[doc = "The resulting mass."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        mass: Option<f64>,
        #[doc = "The material density as denoted by the user."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        material_density: Option<f64>,
        #[doc = "The source format of the file."]
        src_format: FileImportFormat,
        #[doc = "The time and date the API call was started."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The status of the API call."]
        status: ApiCallStatus,
        #[doc = "The time and date the API call was last updated."]
        updated_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The user ID of the user who created the API call."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        user_id: Option<String>,
    },
    #[doc = "A file volume."]
    FileVolume {
        #[doc = "The time and date the API call was completed."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The time and date the API call was created."]
        created_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The error the function returned, if any."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        error: Option<String>,
        #[doc = "The unique identifier of the API call.\n\nThis is the same as the API call ID."]
        id: uuid::Uuid,
        #[doc = "The source format of the file."]
        src_format: FileImportFormat,
        #[doc = "The time and date the API call was started."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The status of the API call."]
        status: ApiCallStatus,
        #[doc = "The time and date the API call was last updated."]
        updated_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The user ID of the user who created the API call."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        user_id: Option<String>,
        #[doc = "The resulting volume."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        volume: Option<f64>,
    },
    #[doc = "A file density."]
    FileDensity {
        #[doc = "The time and date the API call was completed."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The time and date the API call was created."]
        created_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The resulting density."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        density: Option<f64>,
        #[doc = "The error the function returned, if any."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        error: Option<String>,
        #[doc = "The unique identifier of the API call.\n\nThis is the same as the API call ID."]
        id: uuid::Uuid,
        #[doc = "The material mass as denoted by the user."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        material_mass: Option<f64>,
        #[doc = "The source format of the file."]
        src_format: FileImportFormat,
        #[doc = "The time and date the API call was started."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The status of the API call."]
        status: ApiCallStatus,
        #[doc = "The time and date the API call was last updated."]
        updated_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The user ID of the user who created the API call."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        user_id: Option<String>,
    },
    #[doc = "A file surface area."]
    FileSurfaceArea {
        #[doc = "The time and date the API call was completed."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The time and date the API call was created."]
        created_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The error the function returned, if any."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        error: Option<String>,
        #[doc = "The unique identifier of the API call.\n\nThis is the same as the API call ID."]
        id: uuid::Uuid,
        #[doc = "The source format of the file."]
        src_format: FileImportFormat,
        #[doc = "The time and date the API call was started."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        #[doc = "The status of the API call."]
        status: ApiCallStatus,
        #[doc = "The resulting surface area."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        surface_area: Option<f64>,
        #[doc = "The time and date the API call was last updated."]
        updated_at: chrono::DateTime<chrono::Utc>,
        #[doc = "The user ID of the user who created the API call."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        user_id: Option<String>,
    },
}
