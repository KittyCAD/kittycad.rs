#[doc = "The output from the async API call."]
#[derive(
    serde :: Serialize, serde :: Deserialize, PartialEq, Debug, Clone, schemars :: JsonSchema,
)]
#[cfg_attr(feature = "tabled", derive(tabled::Tabled))]
#[serde(tag = "type")]
pub enum AsyncApiCallOutput {
    FileConversion {
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        created_at: chrono::DateTime<chrono::Utc>,
        error: Option<String>,
        id: uuid::Uuid,
        output: Option<base64::Base64Data>,
        output_format: FileExportFormat,
        src_format: FileImportFormat,
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        status: ApiCallStatus,
        updated_at: chrono::DateTime<chrono::Utc>,
        user_id: Option<String>,
    },
    FileCenterOfMass {
        center_of_mass: Option<Vec<f64>>,
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        created_at: chrono::DateTime<chrono::Utc>,
        error: Option<String>,
        id: uuid::Uuid,
        src_format: FileImportFormat,
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        status: ApiCallStatus,
        updated_at: chrono::DateTime<chrono::Utc>,
        user_id: Option<String>,
    },
    FileMass {
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        created_at: chrono::DateTime<chrono::Utc>,
        error: Option<String>,
        id: uuid::Uuid,
        mass: Option<f64>,
        material_density: Option<f64>,
        src_format: FileImportFormat,
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        status: ApiCallStatus,
        updated_at: chrono::DateTime<chrono::Utc>,
        user_id: Option<String>,
    },
    FileVolume {
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        created_at: chrono::DateTime<chrono::Utc>,
        error: Option<String>,
        id: uuid::Uuid,
        src_format: FileImportFormat,
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        status: ApiCallStatus,
        updated_at: chrono::DateTime<chrono::Utc>,
        user_id: Option<String>,
        volume: Option<f64>,
    },
    FileDensity {
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        created_at: chrono::DateTime<chrono::Utc>,
        density: Option<f64>,
        error: Option<String>,
        id: uuid::Uuid,
        material_mass: Option<f64>,
        src_format: FileImportFormat,
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        status: ApiCallStatus,
        updated_at: chrono::DateTime<chrono::Utc>,
        user_id: Option<String>,
    },
    FileSurfaceArea {
        completed_at: Option<chrono::DateTime<chrono::Utc>>,
        created_at: chrono::DateTime<chrono::Utc>,
        error: Option<String>,
        id: uuid::Uuid,
        src_format: FileImportFormat,
        started_at: Option<chrono::DateTime<chrono::Utc>>,
        status: ApiCallStatus,
        surface_area: Option<f64>,
        updated_at: chrono::DateTime<chrono::Utc>,
        user_id: Option<String>,
    },
}
