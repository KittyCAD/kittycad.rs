on:
  pull_request:
    paths:
      - spec.json
      - .github/workflows/make-generate.yml
      - VERSION.txt
name: make-generate
jobs:
  makegenerate:
    # Check if the PR is not from a fork
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    name: make generate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          # required
          app-id: ${{ secrets.GH_ORG_APP_ID }}
          private-key: ${{ secrets.GH_ORG_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Install latest stable/nightly
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y
          rustup default nightly
          rustup default stable
          rustup component add rustfmt
          rustup component add rustfmt --toolchain nightly
          rustup component add clippy
          echo PATH="${HOME}/.cargo/bin:${PATH}" >> ${GITHUB_ENV}
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: taiki-e/install-action@nextest
      - name: Run make generate
        run: |
          export EXPECTORATE=overwrite
          make generate
        env:
          KITTYCAD_API_TOKEN: ${{secrets.KITTYCAD_API_TOKEN}}
        shell: bash
      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$(if [[ -z $(git status --porcelain --untracked-files=no) ]]; then echo "false"; else echo "true"; fi)
      - name: Commit changes, if any
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git remote set-url origin https://${{ github.actor }}:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git fetch origin
          git add .
          git commit -am "I have generated the latest API!" || true
          git push origin ${{github.event.pull_request.head.ref }} || true
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
