#[doc = "An account provider."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum AccountProvider {
    #[serde(rename = "google")]
    #[display("google")]
    Google,
    #[serde(rename = "github")]
    #[display("github")]
    Github,
}

#[doc = "An address."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Address {
    #[doc = "The city component."]
    city: String,
    #[doc = "The country component."]
    country: String,
    #[doc = "The time and date the address was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The unique identifier of the address."]
    id: Id,
    #[doc = "The state component."]
    state: String,
    #[doc = "The first street component."]
    #[serde(rename = "street1")]
    street_1: String,
    #[doc = "The second street component."]
    #[serde(rename = "street2")]
    street_2: String,
    #[doc = "The time and date the address was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID that this address belongs to."]
    user_id: String,
    #[doc = "The zip component."]
    zip: String,
}

#[doc = "A response for a query on the API call table that is grouped by something."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiCallQueryGroup {
    count: i64,
    query: String,
}

#[doc = "The field of an API call to group by."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum ApiCallQueryGroupBy {
    #[serde(rename = "email")]
    #[display("email")]
    Email,
    #[serde(rename = "method")]
    #[display("method")]
    Method,
    #[serde(rename = "endpoint")]
    #[display("endpoint")]
    Endpoint,
    #[serde(rename = "user_id")]
    #[display("user_id")]
    UserId,
    #[serde(rename = "origin")]
    #[display("origin")]
    Origin,
    #[serde(rename = "ip_address")]
    #[display("ip_address")]
    IpAddress,
}

#[doc = "The status of an async API call."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum ApiCallStatus {
    Queued,
    Uploaded,
    #[serde(rename = "In Progress")]
    #[display("In Progress")]
    InProgress,
    Completed,
    Failed,
}

#[doc = "An API call with the price.\n\nThis is a join of the `ApiCall` and `ApiCallPrice` tables."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiCallWithPrice {
    #[doc = "The date and time the API call completed billing."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The date and time the API call was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The duration of the API call."]
    duration: i64,
    #[doc = "The user's email address."]
    email: String,
    #[doc = "The endpoint requested by the API call."]
    endpoint: String,
    #[doc = "The unique identifier for the API call."]
    id: Id,
    #[doc = "The ip address of the origin."]
    ip_address: std::net::Ipv4Addr,
    #[doc = "The HTTP method requsted by the API call."]
    method: Method,
    #[doc = "The number of minutes the API call was billed for."]
    minutes: i32,
    #[doc = "The origin of the API call."]
    origin: String,
    #[doc = "The price of the API call."]
    price: f64,
    #[doc = "The request body sent by the API call."]
    request_body: String,
    #[doc = "The request query params sent by the API call."]
    request_query_params: String,
    #[doc = "The response body returned by the API call. We do not store this information if it is above a certain size."]
    response_body: String,
    #[doc = "The date and time the API call started billing."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status code returned by the API call."]
    status_code: i32,
    #[doc = "The Stripe invoice item ID of the API call if it is billable."]
    stripe_invoice_item_id: String,
    #[doc = "The API token that made the API call."]
    token: Token,
    #[doc = "The date and time the API call was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user agent of the request."]
    user_agent: String,
    #[doc = "The ID of the user that made the API call."]
    user_id: String,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiCallWithPriceResultsPage {
    #[doc = "list of items on this page of results"]
    items: Vec<ApiCallWithPrice>,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "An API token.\n\nThese are used to authenticate users with Bearer authentication."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiToken {
    #[doc = "The date and time the API token was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The unique identifier for the API token."]
    id: String,
    #[doc = "If the token is valid. We never delete API tokens, but we can mark them as invalid. We save them for ever to preserve the history of the API token."]
    is_valid: bool,
    #[doc = "The API token itself."]
    token: Token,
    #[doc = "The date and time the API token was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The ID of the user that owns the API token."]
    user_id: String,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiTokenResultsPage {
    #[doc = "list of items on this page of results"]
    items: Vec<ApiToken>,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "An async API call."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct AsyncApiCall {
    #[doc = "The time and date the async API call was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the async API call was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the async API call.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The JSON input for the API call. These are determined by the endpoint that is run."]
    input: serde_json::Value,
    #[doc = "The JSON output for the API call. These are determined by the endpoint that is run."]
    output: serde_json::Value,
    #[doc = "The time and date the async API call was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the async API call."]
    status: Status,
    #[doc = "The type of async API call."]
    #[serde(rename = "type")]
    type_: Type,
    #[doc = "The time and date the async API call was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the async API call."]
    user_id: String,
    #[doc = "The worker node that is performing or performed the async API call."]
    worker: String,
}

#[doc = "A file conversion."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileConversion {
    #[doc = "The time and date the file conversion was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the file conversion was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the file conversion.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The converted file, if completed, base64 encoded."]
    output: bytes::Bytes,
    #[doc = "The output format of the file conversion."]
    output_format: OutputFormat,
    #[doc = "The source format of the file conversion."]
    src_format: SrcFormat,
    #[doc = "The time and date the file conversion was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the file conversion."]
    status: Status,
    #[serde(rename = "type")]
    type_: Type,
    #[doc = "The time and date the file conversion was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the file conversion."]
    user_id: String,
}

#[doc = "A file mass."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileMass {
    #[doc = "The time and date the mass was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the mass was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the mass request.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The resulting mass."]
    mass: f64,
    #[doc = "The material density as denoted by the user."]
    material_density: f64,
    #[doc = "The source format of the file."]
    src_format: SrcFormat,
    #[doc = "The time and date the mass was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the mass."]
    status: Status,
    #[serde(rename = "type")]
    type_: Type,
    #[doc = "The time and date the mass was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the mass."]
    user_id: String,
}

#[doc = "A file volume."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileVolume {
    #[doc = "The time and date the volume was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the volume was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the volume request.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The source format of the file."]
    src_format: SrcFormat,
    #[doc = "The time and date the volume was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the volume."]
    status: Status,
    #[serde(rename = "type")]
    type_: Type,
    #[doc = "The time and date the volume was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the volume."]
    user_id: String,
    #[doc = "The resulting volume."]
    volume: f64,
}

#[doc = "A file density."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileDensity {
    #[doc = "The time and date the density was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the density was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The resulting density."]
    density: f64,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the density request.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The material mass as denoted by the user."]
    material_mass: f64,
    #[doc = "The source format of the file."]
    src_format: SrcFormat,
    #[doc = "The time and date the density was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the density."]
    status: Status,
    #[serde(rename = "type")]
    type_: Type,
    #[doc = "The time and date the density was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the density."]
    user_id: String,
}

#[doc = "The output from the async API call."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
#[serde(tag = "type")]
pub enum AsyncApiCallOutput {
    FileConversion(FileConversion),
    FileMass(FileMass),
    FileVolume(FileVolume),
    FileDensity(FileDensity),
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct AsyncApiCallResultsPage {
    #[doc = "list of items on this page of results"]
    items: Vec<AsyncApiCall>,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "The type of async API call."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum AsyncApiCallType {
    FileConversion,
    FileVolume,
    FileMass,
    FileDensity,
}

#[doc = "The billing information for payments."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct BillingInfo {
    #[doc = "The address of the customer."]
    address: Address,
    #[doc = "The name of the customer."]
    name: String,
    #[doc = "The phone for the customer."]
    phone: String,
}

#[doc = "Metadata about our cache.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct CacheMetadata {
    #[doc = "If the cache returned an ok response from ping."]
    ok: bool,
}

#[doc = "The card details of a payment method."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct CardDetails {
    #[doc = "Card brand.\n\nCan be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."]
    brand: String,
    #[doc = "Checks on Card address and CVC if provided."]
    checks: Checks,
    #[doc = "Two-letter ISO code representing the country of the card."]
    country: String,
    #[doc = "Two-digit number representing the card's expiration month."]
    exp_month: i64,
    #[doc = "Four-digit number representing the card's expiration year."]
    exp_year: i64,
    #[doc = "Uniquely identifies this particular card number."]
    fingerprint: String,
    #[doc = "Card funding type.\n\nCan be `credit`, `debit`, `prepaid`, or `unknown`."]
    funding: String,
    #[doc = "The last four digits of the card."]
    #[serde(rename = "last4")]
    last_4: String,
}

#[doc = "Cluster information."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Cluster {
    #[doc = "The IP address of the cluster."]
    addr: std::net::Ipv4Addr,
    #[doc = "The auth timeout of the cluster."]
    auth_timeout: i64,
    #[doc = "The port of the cluster."]
    cluster_port: i64,
    #[doc = "The name of the cluster."]
    name: String,
    #[doc = "The TLS timeout for the cluster."]
    tls_timeout: i64,
    #[doc = "The urls of the cluster."]
    urls: Vec<String>,
}

#[doc = "The language code is written in."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum CodeLanguage {
    #[serde(rename = "go")]
    #[display("go")]
    Go,
    #[serde(rename = "python")]
    #[display("python")]
    Python,
    #[serde(rename = "node")]
    #[display("node")]
    Node,
}

#[doc = "Output of the code being executed."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct CodeOutput {
    #[doc = "The contents of the files requested if they were passed."]
    output_files: Vec<OutputFile>,
    #[doc = "The stderr of the code."]
    stderr: String,
    #[doc = "The stdout of the code."]
    stdout: String,
}

#[doc = "Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Commit {
    #[doc = "Commit ID of external tool expected by dockerd as set at build time."]
    expected: String,
    #[doc = "Actual commit ID of external tool."]
    id: String,
}

#[doc = "Metadata about a pub-sub connection.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Connection {
    #[doc = "The auth timeout of the server."]
    auth_timeout: i64,
    #[doc = "Information about the cluster."]
    cluster: Cluster,
    #[doc = "The time the configuration was loaded."]
    config_load_time: chrono::DateTime<chrono::Utc>,
    #[doc = "The number of connections to the server."]
    connections: i64,
    #[doc = "The CPU core usage of the server."]
    cores: i64,
    cpu: f64,
    #[doc = "Information about the gateway."]
    gateway: Gateway,
    #[doc = "The git commit."]
    git_commit: String,
    #[doc = "The go version."]
    go: String,
    #[doc = "`GOMAXPROCS` of the server."]
    gomaxprocs: i64,
    #[doc = "The host of the server."]
    host: std::net::Ipv4Addr,
    #[doc = "The http base path of the server."]
    http_base_path: String,
    #[doc = "The http host of the server."]
    http_host: String,
    #[doc = "The http port of the server."]
    http_port: i64,
    http_req_stats: std::collections::HashMap<String, i64>,
    #[doc = "The https port of the server."]
    https_port: i64,
    #[doc = "The count of inbound bytes for the server."]
    in_bytes: i64,
    #[doc = "The number of inbound messages for the server."]
    in_msgs: i64,
    #[doc = "Jetstream information."]
    jetstream: Jetstream,
    #[doc = "Information about leaf nodes."]
    leaf: Leaf,
    #[doc = "The number of leaf nodes for the server."]
    leafnodes: i64,
    #[doc = "The max connections of the server."]
    max_connections: i64,
    #[doc = "The max control line of the server."]
    max_control_line: i64,
    #[doc = "The max payload of the server."]
    max_payload: i64,
    #[doc = "The max pending of the server."]
    max_pending: i64,
    #[doc = "The memory usage of the server."]
    mem: i64,
    #[doc = "The time now."]
    now: chrono::DateTime<chrono::Utc>,
    #[doc = "The count of outbound bytes for the server."]
    out_bytes: i64,
    #[doc = "The number of outbound messages for the server."]
    out_msgs: i64,
    #[doc = "The ping interval of the server."]
    ping_interval: i64,
    #[doc = "The ping max of the server."]
    ping_max: i64,
    #[doc = "The port of the server."]
    port: i64,
    #[doc = "The protocol version."]
    proto: i64,
    #[doc = "The number of remotes for the server."]
    remotes: i64,
    #[doc = "The number of routes for the server."]
    routes: i64,
    #[doc = "The server ID."]
    server_id: String,
    #[doc = "The server name."]
    server_name: String,
    #[doc = "The number of slow consumers for the server."]
    slow_consumers: i64,
    #[doc = "When the server was started."]
    start: chrono::DateTime<chrono::Utc>,
    #[doc = "The number of subscriptions for the server."]
    subscriptions: i64,
    #[doc = "The system account."]
    system_account: String,
    #[doc = "The TLS timeout of the server."]
    tls_timeout: i64,
    #[doc = "The total number of connections to the server."]
    total_connections: i64,
    #[doc = "The uptime of the server."]
    uptime: String,
    #[doc = "The version of the service."]
    version: String,
    #[doc = "The write deadline of the server."]
    write_deadline: i64,
}

#[doc = "Supported set of sort modes for scanning by created_at only.\n\nCurrently, we only support scanning in ascending order."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum CreatedAtSortMode {
    #[serde(rename = "created-at-ascending")]
    #[display("created-at-ascending")]
    CreatedAtAscending,
    #[serde(rename = "created-at-descending")]
    #[display("created-at-descending")]
    CreatedAtDescending,
}

#[doc = "Currency is the list of supported currencies.\n\nFor more details see <https://support.stripe.com/questions/which-currencies-does-stripe-support>."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Currency {
    #[serde(rename = "aed")]
    #[display("aed")]
    Aed,
    #[serde(rename = "afn")]
    #[display("afn")]
    Afn,
    #[serde(rename = "all")]
    #[display("all")]
    All,
    #[serde(rename = "amd")]
    #[display("amd")]
    Amd,
    #[serde(rename = "ang")]
    #[display("ang")]
    Ang,
    #[serde(rename = "aoa")]
    #[display("aoa")]
    Aoa,
    #[serde(rename = "ars")]
    #[display("ars")]
    Ars,
    #[serde(rename = "aud")]
    #[display("aud")]
    Aud,
    #[serde(rename = "awg")]
    #[display("awg")]
    Awg,
    #[serde(rename = "azn")]
    #[display("azn")]
    Azn,
    #[serde(rename = "bam")]
    #[display("bam")]
    Bam,
    #[serde(rename = "bbd")]
    #[display("bbd")]
    Bbd,
    #[serde(rename = "bdt")]
    #[display("bdt")]
    Bdt,
    #[serde(rename = "bgn")]
    #[display("bgn")]
    Bgn,
    #[serde(rename = "bif")]
    #[display("bif")]
    Bif,
    #[serde(rename = "bmd")]
    #[display("bmd")]
    Bmd,
    #[serde(rename = "bnd")]
    #[display("bnd")]
    Bnd,
    #[serde(rename = "bob")]
    #[display("bob")]
    Bob,
    #[serde(rename = "brl")]
    #[display("brl")]
    Brl,
    #[serde(rename = "bsd")]
    #[display("bsd")]
    Bsd,
    #[serde(rename = "bwp")]
    #[display("bwp")]
    Bwp,
    #[serde(rename = "bzd")]
    #[display("bzd")]
    Bzd,
    #[serde(rename = "cad")]
    #[display("cad")]
    Cad,
    #[serde(rename = "cdf")]
    #[display("cdf")]
    Cdf,
    #[serde(rename = "chf")]
    #[display("chf")]
    Chf,
    #[serde(rename = "clp")]
    #[display("clp")]
    Clp,
    #[serde(rename = "cny")]
    #[display("cny")]
    Cny,
    #[serde(rename = "cop")]
    #[display("cop")]
    Cop,
    #[serde(rename = "crc")]
    #[display("crc")]
    Crc,
    #[serde(rename = "cve")]
    #[display("cve")]
    Cve,
    #[serde(rename = "czk")]
    #[display("czk")]
    Czk,
    #[serde(rename = "djf")]
    #[display("djf")]
    Djf,
    #[serde(rename = "dkk")]
    #[display("dkk")]
    Dkk,
    #[serde(rename = "dop")]
    #[display("dop")]
    Dop,
    #[serde(rename = "dzd")]
    #[display("dzd")]
    Dzd,
    #[serde(rename = "eek")]
    #[display("eek")]
    Eek,
    #[serde(rename = "egp")]
    #[display("egp")]
    Egp,
    #[serde(rename = "etb")]
    #[display("etb")]
    Etb,
    #[serde(rename = "eur")]
    #[display("eur")]
    Eur,
    #[serde(rename = "fjd")]
    #[display("fjd")]
    Fjd,
    #[serde(rename = "fkp")]
    #[display("fkp")]
    Fkp,
    #[serde(rename = "gbp")]
    #[display("gbp")]
    Gbp,
    #[serde(rename = "gel")]
    #[display("gel")]
    Gel,
    #[serde(rename = "gip")]
    #[display("gip")]
    Gip,
    #[serde(rename = "gmd")]
    #[display("gmd")]
    Gmd,
    #[serde(rename = "gnf")]
    #[display("gnf")]
    Gnf,
    #[serde(rename = "gtq")]
    #[display("gtq")]
    Gtq,
    #[serde(rename = "gyd")]
    #[display("gyd")]
    Gyd,
    #[serde(rename = "hkd")]
    #[display("hkd")]
    Hkd,
    #[serde(rename = "hnl")]
    #[display("hnl")]
    Hnl,
    #[serde(rename = "hrk")]
    #[display("hrk")]
    Hrk,
    #[serde(rename = "htg")]
    #[display("htg")]
    Htg,
    #[serde(rename = "huf")]
    #[display("huf")]
    Huf,
    #[serde(rename = "idr")]
    #[display("idr")]
    Idr,
    #[serde(rename = "ils")]
    #[display("ils")]
    Ils,
    #[serde(rename = "inr")]
    #[display("inr")]
    Inr,
    #[serde(rename = "isk")]
    #[display("isk")]
    Isk,
    #[serde(rename = "jmd")]
    #[display("jmd")]
    Jmd,
    #[serde(rename = "jpy")]
    #[display("jpy")]
    Jpy,
    #[serde(rename = "kes")]
    #[display("kes")]
    Kes,
    #[serde(rename = "kgs")]
    #[display("kgs")]
    Kgs,
    #[serde(rename = "khr")]
    #[display("khr")]
    Khr,
    #[serde(rename = "kmf")]
    #[display("kmf")]
    Kmf,
    #[serde(rename = "krw")]
    #[display("krw")]
    Krw,
    #[serde(rename = "kyd")]
    #[display("kyd")]
    Kyd,
    #[serde(rename = "kzt")]
    #[display("kzt")]
    Kzt,
    #[serde(rename = "lak")]
    #[display("lak")]
    Lak,
    #[serde(rename = "lbp")]
    #[display("lbp")]
    Lbp,
    #[serde(rename = "lkr")]
    #[display("lkr")]
    Lkr,
    #[serde(rename = "lrd")]
    #[display("lrd")]
    Lrd,
    #[serde(rename = "lsl")]
    #[display("lsl")]
    Lsl,
    #[serde(rename = "ltl")]
    #[display("ltl")]
    Ltl,
    #[serde(rename = "lvl")]
    #[display("lvl")]
    Lvl,
    #[serde(rename = "mad")]
    #[display("mad")]
    Mad,
    #[serde(rename = "mdl")]
    #[display("mdl")]
    Mdl,
    #[serde(rename = "mga")]
    #[display("mga")]
    Mga,
    #[serde(rename = "mkd")]
    #[display("mkd")]
    Mkd,
    #[serde(rename = "mnt")]
    #[display("mnt")]
    Mnt,
    #[serde(rename = "mop")]
    #[display("mop")]
    Mop,
    #[serde(rename = "mro")]
    #[display("mro")]
    Mro,
    #[serde(rename = "mur")]
    #[display("mur")]
    Mur,
    #[serde(rename = "mvr")]
    #[display("mvr")]
    Mvr,
    #[serde(rename = "mwk")]
    #[display("mwk")]
    Mwk,
    #[serde(rename = "mxn")]
    #[display("mxn")]
    Mxn,
    #[serde(rename = "myr")]
    #[display("myr")]
    Myr,
    #[serde(rename = "mzn")]
    #[display("mzn")]
    Mzn,
    #[serde(rename = "nad")]
    #[display("nad")]
    Nad,
    #[serde(rename = "ngn")]
    #[display("ngn")]
    Ngn,
    #[serde(rename = "nio")]
    #[display("nio")]
    Nio,
    #[serde(rename = "nok")]
    #[display("nok")]
    Nok,
    #[serde(rename = "npr")]
    #[display("npr")]
    Npr,
    #[serde(rename = "nzd")]
    #[display("nzd")]
    Nzd,
    #[serde(rename = "pab")]
    #[display("pab")]
    Pab,
    #[serde(rename = "pen")]
    #[display("pen")]
    Pen,
    #[serde(rename = "pgk")]
    #[display("pgk")]
    Pgk,
    #[serde(rename = "php")]
    #[display("php")]
    Php,
    #[serde(rename = "pkr")]
    #[display("pkr")]
    Pkr,
    #[serde(rename = "pln")]
    #[display("pln")]
    Pln,
    #[serde(rename = "pyg")]
    #[display("pyg")]
    Pyg,
    #[serde(rename = "qar")]
    #[display("qar")]
    Qar,
    #[serde(rename = "ron")]
    #[display("ron")]
    Ron,
    #[serde(rename = "rsd")]
    #[display("rsd")]
    Rsd,
    #[serde(rename = "rub")]
    #[display("rub")]
    Rub,
    #[serde(rename = "rwf")]
    #[display("rwf")]
    Rwf,
    #[serde(rename = "sar")]
    #[display("sar")]
    Sar,
    #[serde(rename = "sbd")]
    #[display("sbd")]
    Sbd,
    #[serde(rename = "scr")]
    #[display("scr")]
    Scr,
    #[serde(rename = "sek")]
    #[display("sek")]
    Sek,
    #[serde(rename = "sgd")]
    #[display("sgd")]
    Sgd,
    #[serde(rename = "shp")]
    #[display("shp")]
    Shp,
    #[serde(rename = "sll")]
    #[display("sll")]
    Sll,
    #[serde(rename = "sos")]
    #[display("sos")]
    Sos,
    #[serde(rename = "srd")]
    #[display("srd")]
    Srd,
    #[serde(rename = "std")]
    #[display("std")]
    Std,
    #[serde(rename = "svc")]
    #[display("svc")]
    Svc,
    #[serde(rename = "szl")]
    #[display("szl")]
    Szl,
    #[serde(rename = "thb")]
    #[display("thb")]
    Thb,
    #[serde(rename = "tjs")]
    #[display("tjs")]
    Tjs,
    #[serde(rename = "top")]
    #[display("top")]
    Top,
    #[serde(rename = "try")]
    #[display("try")]
    Try,
    #[serde(rename = "ttd")]
    #[display("ttd")]
    Ttd,
    #[serde(rename = "twd")]
    #[display("twd")]
    Twd,
    #[serde(rename = "tzs")]
    #[display("tzs")]
    Tzs,
    #[serde(rename = "uah")]
    #[display("uah")]
    Uah,
    #[serde(rename = "ugx")]
    #[display("ugx")]
    Ugx,
    #[serde(rename = "usd")]
    #[display("usd")]
    Usd,
    #[serde(rename = "uyu")]
    #[display("uyu")]
    Uyu,
    #[serde(rename = "uzs")]
    #[display("uzs")]
    Uzs,
    #[serde(rename = "vef")]
    #[display("vef")]
    Vef,
    #[serde(rename = "vnd")]
    #[display("vnd")]
    Vnd,
    #[serde(rename = "vuv")]
    #[display("vuv")]
    Vuv,
    #[serde(rename = "wst")]
    #[display("wst")]
    Wst,
    #[serde(rename = "xaf")]
    #[display("xaf")]
    Xaf,
    #[serde(rename = "xcd")]
    #[display("xcd")]
    Xcd,
    #[serde(rename = "xof")]
    #[display("xof")]
    Xof,
    #[serde(rename = "xpf")]
    #[display("xpf")]
    Xpf,
    #[serde(rename = "yer")]
    #[display("yer")]
    Yer,
    #[serde(rename = "zar")]
    #[display("zar")]
    Zar,
    #[serde(rename = "zmw")]
    #[display("zmw")]
    Zmw,
}

#[doc = "The resource representing a payment \"Customer\"."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Customer {
    #[doc = "The customer's address."]
    address: Address,
    #[doc = "Current balance, if any, being stored on the customer.\n\nIf negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized."]
    balance: f64,
    #[doc = "Time at which the object was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes."]
    currency: Currency,
    #[doc = "When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed.\n\nWhen the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by dunning, `delinquent` doesn't get reset to `false`."]
    delinquent: bool,
    #[doc = "The customer's email address."]
    email: String,
    #[doc = "Unique identifier for the object."]
    id: String,
    #[doc = "Set of key-value pairs."]
    metadata: std::collections::HashMap<String, String>,
    #[doc = "The customer's full name or business name."]
    name: String,
    #[doc = "The customer's phone number."]
    phone: String,
}

#[doc = "The form for a device access token request."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct DeviceAccessTokenRequestForm {
    #[doc = "The client ID."]
    client_id: uuid::Uuid,
    #[doc = "The device code."]
    device_code: uuid::Uuid,
    #[doc = "The grant type."]
    grant_type: GrantType,
}

#[doc = "The request parameters for the OAuth 2.0 Device Authorization Grant flow."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct DeviceAuthRequestForm {
    #[doc = "The client ID."]
    client_id: uuid::Uuid,
}

#[doc = "The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct DeviceAuthVerifyParams {
    #[doc = "The user code."]
    user_code: String,
}

#[doc = "Docker system info."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct DockerSystemInfo {
    #[doc = "Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment)."]
    architecture: String,
    #[doc = "Indicates if `bridge-nf-call-ip6tables` is available on the host."]
    #[serde(rename = "bridge_nf_ip6tables")]
    bridge_nf_ip_6tables: bool,
    #[doc = "Indicates if `bridge-nf-call-iptables` is available on the host."]
    bridge_nf_iptables: bool,
    #[doc = "The driver to use for managing cgroups."]
    cgroup_driver: CgroupDriver,
    #[doc = "The version of the cgroup."]
    cgroup_version: CgroupVersion,
    #[doc = "The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.\n\n**Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty."]
    cluster_advertise: String,
    #[doc = "URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.\n\n**Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty."]
    cluster_store: String,
    containerd_commit: ContainerdCommit,
    #[doc = "Total number of containers on the host."]
    containers: i64,
    #[doc = "Number of containers with status `\\\"paused\\\"`."]
    containers_paused: i64,
    #[doc = "Number of containers with status `\\\"running\\\"`."]
    containers_running: i64,
    #[doc = "Number of containers with status `\\\"stopped\\\"`."]
    containers_stopped: i64,
    #[doc = "Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host."]
    cpu_cfs_period: bool,
    #[doc = "Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host."]
    cpu_cfs_quota: bool,
    #[doc = "Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)"]
    cpu_set: bool,
    #[doc = "Indicates if CPU Shares limiting is supported by the host."]
    cpu_shares: bool,
    #[doc = "Indicates if the daemon is running in debug-mode / with debug-level logging enabled."]
    debug: bool,
    #[doc = "List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \\\"10.10.0.0/16\\\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools."]
    default_address_pools: Vec<SystemInfoDefaultAddressPools>,
    #[doc = "Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time."]
    default_runtime: String,
    #[doc = "Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\\\ProgramData\\\\docker` on Windows."]
    docker_root_dir: String,
    #[doc = "Name of the storage driver in use."]
    driver: String,
    #[doc = "Information specific to the storage driver, provided as \\\"label\\\" / \\\"value\\\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.\n\n**Note**: The information returned in this field, including the formatting of values and labels, should not be considered stable, and may change without notice."]
    driver_status: Vec<Vec<String>>,
    #[doc = "Indicates if experimental features are enabled on the daemon."]
    experimental_build: bool,
    #[doc = "HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration."]
    http_proxy: String,
    #[doc = "HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration."]
    https_proxy: String,
    #[doc = "Unique identifier of the daemon.\n\n**Note**: The format of the ID itself is not part of the API, and should not be considered stable."]
    id: String,
    #[doc = "Total number of images on the host. Both _tagged_ and _untagged_ (dangling) images are counted."]
    images: i64,
    #[doc = "Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud."]
    index_server_address: String,
    #[doc = "Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result."]
    init_binary: String,
    init_commit: InitCommit,
    #[doc = "Indicates IPv4 forwarding is enabled."]
    #[serde(rename = "ipv4_forwarding")]
    ipv_4_forwarding: bool,
    #[doc = "Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms."]
    isolation: Isolation,
    #[doc = "Indicates if the host has kernel memory limit support enabled.\n\n**Deprecated**: This field is deprecated as the kernel 5.4 deprecated `kmem.limit_in_bytes`."]
    kernel_memory: bool,
    #[doc = "Indicates if the host has kernel memory TCP limit support enabled.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup."]
    kernel_memory_tcp: bool,
    #[doc = "Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\\\\\SOFTWARE\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\CurrentVersion\\\\\\\\</kbd> registry value, for example _\\\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\\\"_."]
    kernel_version: String,
    #[doc = "User-defined labels (key/value metadata) as set on the daemon.\n\n**Note**: When part of a Swarm, nodes can both have _daemon_ labels, set through the daemon configuration, and _node_ labels, set from a manager node in the Swarm. Node labels are not included in this field. Node labels can be retrieved using the `/nodes/(id)` endpoint on a manager node in the Swarm."]
    labels: Vec<String>,
    #[doc = "Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected."]
    live_restore_enabled: bool,
    #[doc = "The logging driver to use as a default for new containers."]
    logging_driver: String,
    #[doc = "Total amount of physical memory available on the host, in bytes."]
    mem_total: i64,
    #[doc = "Indicates if the host has memory limit support enabled."]
    memory_limit: bool,
    #[doc = "Number of event listeners subscribed."]
    n_events_listener: i64,
    #[doc = "The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled."]
    n_fd: i64,
    #[doc = "Hostname of the host."]
    name: String,
    #[doc = "The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected."]
    ncpu: i64,
    #[doc = "Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration."]
    no_proxy: String,
    #[doc = "Indicates if OOM killer disable is supported on the host."]
    oom_kill_disable: bool,
    #[doc = "Name of the host's operating system, for example: \\\"Ubuntu 16.04.2 LTS\\\" or \\\"Windows Server 2016 Datacenter\\\""]
    operating_system: String,
    #[doc = "Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \\\"linux\\\" and \\\"windows\\\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment)."]
    os_type: String,
    #[doc = "Version of the host's operating system\n\n**Note**: The information returned in this field, including its very existence, and the formatting of values, should not be considered stable, and may change without notice."]
    os_version: String,
    #[doc = "Indicates if the host kernel has PID limit support enabled."]
    pids_limit: bool,
    plugins: Plugins,
    #[doc = "Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included."]
    product_license: String,
    registry_config: RegistryConfig,
    runc_commit: RuncCommit,
    runtimes: std::collections::HashMap<String, Runtime>,
    #[doc = "List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs."]
    security_options: Vec<String>,
    #[doc = "Version string of the daemon. **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) returns the Swarm version instead of the daemon  version, for example `swarm/1.2.8`."]
    server_version: String,
    #[doc = "Indicates if the host has memory swap limit support enabled."]
    swap_limit: bool,
    #[doc = "The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled."]
    system_time: String,
    #[doc = "List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user."]
    warnings: Vec<String>,
}

#[doc = "The body of the form for email authentication."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct EmailAuthenticationForm {
    #[doc = "The URL to redirect back to after we have authenticated."]
    callback_url: url::Url,
    #[doc = "The user's email."]
    email: String,
}

#[doc = "Metadata about our currently running server.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct EngineMetadata {
    #[doc = "If any async job is currently running."]
    async_jobs_running: bool,
    #[doc = "Metadata about our cache."]
    cache: Cache,
    #[doc = "The environment we are running in."]
    environment: Environment,
    #[doc = "Metadata about our file system."]
    fs: Fs,
    #[doc = "The git hash of the server."]
    git_hash: String,
    #[doc = "Metadata about our pub-sub connection."]
    pubsub: Pubsub,
}

#[doc = "The environment the server is running in."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Environment {
    #[serde(rename = "DEVELOPMENT")]
    #[display("DEVELOPMENT")]
    Development,
    #[serde(rename = "PREVIEW")]
    #[display("PREVIEW")]
    Preview,
    #[serde(rename = "PRODUCTION")]
    #[display("PRODUCTION")]
    Production,
}

#[doc = "Error information from a response."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Error {
    error_code: String,
    message: String,
    request_id: String,
}

#[doc = "Metadata about our currently running server.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ExecutorMetadata {
    #[doc = "Information about the docker daemon."]
    docker_info: DockerInfo,
    #[doc = "The environment we are running in."]
    environment: Environment,
    #[doc = "The git hash of the server."]
    git_hash: String,
}

#[doc = "Extended user information.\n\nThis is mostly used for internal purposes. It returns a mapping of the user's information, including that of our third party services we use for users: MailChimp, Stripe, and Zendesk."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ExtendedUser {
    #[doc = "The user's company."]
    company: String,
    #[doc = "The date and time the user was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's Discord handle."]
    discord: String,
    #[doc = "The email address of the user."]
    email: String,
    #[doc = "The date and time the email address was verified."]
    email_verified: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's first name."]
    first_name: String,
    #[doc = "The user's GitHub handle."]
    github: String,
    #[doc = "The unique identifier for the user."]
    id: String,
    #[doc = "The image avatar for the user. This is a URL."]
    image: url::Url,
    #[doc = "The user's last name."]
    last_name: String,
    #[doc = "The user's MailChimp ID. This is mostly used for internal mapping."]
    mailchimp_id: String,
    #[doc = "The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields."]
    name: String,
    #[doc = "The user's phone number."]
    phone: String,
    #[doc = "The user's Stripe ID. This is mostly used for internal mapping."]
    stripe_id: String,
    #[doc = "The date and time the user was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's Zendesk ID. This is mostly used for internal mapping."]
    zendesk_id: String,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ExtendedUserResultsPage {
    #[doc = "list of items on this page of results"]
    items: Vec<ExtendedUser>,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "A file conversion."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileConversion {
    #[doc = "The time and date the file conversion was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the file conversion was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the file conversion.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The converted file, if completed, base64 encoded."]
    output: bytes::Bytes,
    #[doc = "The output format of the file conversion."]
    output_format: OutputFormat,
    #[doc = "The source format of the file conversion."]
    src_format: SrcFormat,
    #[doc = "The time and date the file conversion was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the file conversion."]
    status: Status,
    #[doc = "The time and date the file conversion was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the file conversion."]
    user_id: String,
}

#[doc = "A file density result."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileDensity {
    #[doc = "The time and date the density was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the density was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The resulting density."]
    density: f64,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the density request.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The material mass as denoted by the user."]
    material_mass: f64,
    #[doc = "The source format of the file."]
    src_format: SrcFormat,
    #[doc = "The time and date the density was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the density."]
    status: Status,
    #[doc = "The time and date the density was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the density."]
    user_id: String,
}

#[doc = "A file mass result."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileMass {
    #[doc = "The time and date the mass was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the mass was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the mass request.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The resulting mass."]
    mass: f64,
    #[doc = "The material density as denoted by the user."]
    material_density: f64,
    #[doc = "The source format of the file."]
    src_format: SrcFormat,
    #[doc = "The time and date the mass was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the mass."]
    status: Status,
    #[doc = "The time and date the mass was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the mass."]
    user_id: String,
}

#[doc = "The valid types of output file formats."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum FileOutputFormat {
    #[serde(rename = "stl")]
    #[display("stl")]
    Stl,
    #[serde(rename = "obj")]
    #[display("obj")]
    Obj,
    #[serde(rename = "dae")]
    #[display("dae")]
    Dae,
    #[serde(rename = "step")]
    #[display("step")]
    Step,
    #[serde(rename = "fbx")]
    #[display("fbx")]
    Fbx,
    #[serde(rename = "fbxb")]
    #[display("fbxb")]
    Fbxb,
}

#[doc = "The valid types of source file formats."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum FileSourceFormat {
    #[serde(rename = "stl")]
    #[display("stl")]
    Stl,
    #[serde(rename = "obj")]
    #[display("obj")]
    Obj,
    #[serde(rename = "dae")]
    #[display("dae")]
    Dae,
    #[serde(rename = "step")]
    #[display("step")]
    Step,
    #[serde(rename = "fbx")]
    #[display("fbx")]
    Fbx,
}

#[doc = "Metadata about our file system.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileSystemMetadata {
    #[doc = "If the file system passed a sanity check."]
    ok: bool,
}

#[doc = "A file volume result."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileVolume {
    #[doc = "The time and date the volume was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the volume was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the volume request.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The source format of the file."]
    src_format: SrcFormat,
    #[doc = "The time and date the volume was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the volume."]
    status: Status,
    #[doc = "The time and date the volume was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the volume."]
    user_id: String,
    #[doc = "The resulting volume."]
    volume: f64,
}

#[doc = "Gateway information."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Gateway {
    #[doc = "The auth timeout of the gateway."]
    auth_timeout: i64,
    #[doc = "The host of the gateway."]
    host: String,
    #[doc = "The name of the gateway."]
    name: String,
    #[doc = "The port of the gateway."]
    port: i64,
    #[doc = "The TLS timeout for the gateway."]
    tls_timeout: i64,
}

#[doc = "IndexInfo contains information about a registry."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct IndexInfo {
    #[doc = "List of mirrors, expressed as URIs."]
    mirrors: Vec<String>,
    #[doc = "Name of the registry, such as \\\"docker.io\\\"."]
    name: String,
    #[doc = "Indicates whether this is an official registry (i.e., Docker Hub / docker.io)"]
    official: bool,
    #[doc = "Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.\n\n**Warning**: Insecure registries can be useful when running a local registry. However, because its use creates security vulnerabilities it should ONLY be enabled for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option."]
    secure: bool,
}

#[doc = "An invoice."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Invoice {
    #[doc = "Final amount due at this time for this invoice.\n\nIf the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`."]
    amount_due: f64,
    #[doc = "The amount, in USD, that was paid."]
    amount_paid: f64,
    #[doc = "The amount remaining, in USD, that is due."]
    amount_remaining: f64,
    #[doc = "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.\n\nAny payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule."]
    attempt_count: u64,
    #[doc = "Whether an attempt has been made to pay the invoice.\n\nAn invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users."]
    attempted: bool,
    #[doc = "Time at which the object was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase."]
    currency: Currency,
    #[doc = "The email address for the customer. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated."]
    customer_email: String,
    #[doc = "Customer ID. The unique identifier for the customer this invoice belongs to. This is the customer ID in the payments service, not our database customer ID."]
    customer_id: String,
    #[doc = "Default payment method."]
    default_payment_method: String,
    #[doc = "Description of the invoice."]
    description: String,
    #[doc = "Unique identifier for the object."]
    id: String,
    #[doc = "The individual line items that make up the invoice.\n\n`lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any."]
    lines: Vec<InvoiceLineItem>,
    #[doc = "Set of key-value pairs."]
    metadata: std::collections::HashMap<String, String>,
    #[doc = "A unique, identifying string that appears on emails sent to the customer for this invoice."]
    number: String,
    #[doc = "Whether payment was successfully collected for this invoice.\n\nAn invoice can be paid (most commonly) with a charge or with credit from the customer's account balance."]
    paid: bool,
    #[doc = "The link to download the PDF for the invoice."]
    pdf: url::Url,
    #[doc = "This is the transaction number that appears on email receipts sent for this invoice."]
    receipt_number: String,
    #[doc = "Extra information about an invoice for the customer's credit card statement."]
    statement_descriptor: String,
    #[doc = "The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.\n\n[Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)."]
    status: Status,
    #[doc = "Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied.\n\nItem discounts are already incorporated."]
    subtotal: f64,
    #[doc = "The amount of tax on this invoice.\n\nThis is the sum of all the tax amounts on this invoice."]
    tax: f64,
    #[doc = "Total after discounts and taxes."]
    total: f64,
    #[doc = "The URL for the hosted invoice page, which allows customers to view and pay an invoice."]
    url: url::Url,
}

#[doc = "An invoice line item."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct InvoiceLineItem {
    #[doc = "The amount, in USD."]
    amount: f64,
    #[doc = "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase."]
    currency: Currency,
    #[doc = "The description."]
    description: String,
    #[doc = "Unique identifier for the object."]
    id: String,
    #[doc = "The ID of the invoice item associated with this line item if any."]
    invoice_item: String,
    #[doc = "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.\n\nSet of key-value pairs."]
    metadata: std::collections::HashMap<String, String>,
}

#[doc = "An enum representing the possible values of an `Invoice`'s `status` field."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum InvoiceStatus {
    #[serde(rename = "deleted")]
    #[display("deleted")]
    Deleted,
    #[serde(rename = "draft")]
    #[display("draft")]
    Draft,
    #[serde(rename = "open")]
    #[display("open")]
    Open,
    #[serde(rename = "paid")]
    #[display("paid")]
    Paid,
    #[serde(rename = "uncollectible")]
    #[display("uncollectible")]
    Uncollectible,
    #[serde(rename = "void")]
    #[display("void")]
    Void,
}

#[doc = "Jetstream information."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Jetstream {
    #[doc = "The Jetstream config."]
    config: Config,
    #[doc = "Meta information about the cluster."]
    meta: Meta,
    #[doc = "Jetstream statistics."]
    stats: Stats,
}

#[doc = "Jetstream API statistics."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct JetstreamApiStats {
    #[doc = "The number of errors."]
    errors: i64,
    #[doc = "The number of inflight requests."]
    inflight: i64,
    #[doc = "The number of requests."]
    total: i64,
}

#[doc = "Jetstream configuration."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct JetstreamConfig {
    #[doc = "The domain."]
    domain: String,
    #[doc = "The max memory."]
    max_memory: i64,
    #[doc = "The max storage."]
    max_storage: i64,
    #[doc = "The store directory."]
    store_dir: String,
}

#[doc = "Jetstream statistics."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct JetstreamStats {
    #[doc = "The number of accounts."]
    accounts: i64,
    #[doc = "API stats."]
    api: Api,
    #[doc = "The number of HA assets."]
    ha_assets: i64,
    #[doc = "The memory used by the Jetstream server."]
    memory: i64,
    #[doc = "The reserved memory for the Jetstream server."]
    reserved_memory: i64,
    #[doc = "The reserved storage for the Jetstream server."]
    reserved_store: i64,
    #[doc = "The storage used by the Jetstream server."]
    store: i64,
}

#[doc = "Leaf node information."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct LeafNode {
    #[doc = "The auth timeout of the leaf node."]
    auth_timeout: i64,
    #[doc = "The host of the leaf node."]
    host: String,
    #[doc = "The port of the leaf node."]
    port: i64,
    #[doc = "The TLS timeout for the leaf node."]
    tls_timeout: i64,
}

#[doc = "Jetstream statistics."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct MetaClusterInfo {
    #[doc = "The size of the cluster."]
    cluster_size: i64,
    #[doc = "The leader of the cluster."]
    leader: String,
    #[doc = "The name of the cluster."]
    name: String,
}

#[doc = "Metadata about our currently running server.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Metadata {
    #[doc = "Metadata about our cache."]
    cache: Cache,
    #[doc = "Metadata about our engine API connection."]
    engine: Engine,
    #[doc = "The environment we are running in."]
    environment: Environment,
    #[doc = "Metadata about our executor API connection."]
    executor: Executor,
    #[doc = "Metadata about our file system."]
    fs: Fs,
    #[doc = "The git hash of the server."]
    git_hash: String,
    #[doc = "Metadata about our pub-sub connection."]
    pubsub: Pubsub,
}

#[doc = "The Request Method (VERB)\n\nThis type also contains constants for a number of common HTTP methods such as GET, POST, etc.\n\nCurrently includes 8 variants representing the 8 methods defined in [RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an Extension variant for all extensions."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Method {
    #[serde(rename = "OPTIONS")]
    #[display("OPTIONS")]
    Options,
    #[serde(rename = "GET")]
    #[display("GET")]
    Get,
    #[serde(rename = "POST")]
    #[display("POST")]
    Post,
    #[serde(rename = "PUT")]
    #[display("PUT")]
    Put,
    #[serde(rename = "DELETE")]
    #[display("DELETE")]
    Delete,
    #[serde(rename = "HEAD")]
    #[display("HEAD")]
    Head,
    #[serde(rename = "TRACE")]
    #[display("TRACE")]
    Trace,
    #[serde(rename = "CONNECT")]
    #[display("CONNECT")]
    Connect,
    #[serde(rename = "PATCH")]
    #[display("PATCH")]
    Patch,
    #[serde(rename = "EXTENSION")]
    #[display("EXTENSION")]
    Extension,
}

#[doc = "Information about an OAuth 2.0 client."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Oauth2ClientInfo {
    #[doc = "Value used for [CSRF](https://tools.ietf.org/html/rfc6749#section-10.12) protection via the `state` parameter."]
    csrf_token: String,
    #[doc = "Code Verifier used for [PKCE]((https://tools.ietf.org/html/rfc7636)) protection via the `code_verifier` parameter. The value must have a minimum length of 43 characters and a maximum length of 128 characters.  Each character must be ASCII alphanumeric or one of the characters \"-\" / \".\" / \"_\" / \"~\"."]
    pkce_code_verifier: String,
    #[doc = "The URL for consent."]
    url: String,
}

#[doc = "An OAuth 2.0 Grant Type. These are documented here: <https://oauth.net/2/grant-types/>."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Oauth2GrantType {
    #[serde(rename = "urn:ietf:params:oauth:grant-type:device_code")]
    #[display("urn:ietf:params:oauth:grant-type:device_code")]
    UrnIetfParamsOauthGrantTypeDeviceCode,
}

impl Default for Oauth2GrantType {
    fn default() -> Self {
        Oauth2GrantType::UrnIetfParamsOauthGrantTypeDeviceCode
    }
}

#[doc = "Output file contents."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct OutputFile {
    #[doc = "The contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON."]
    contents: String,
    #[doc = "The name of the file."]
    name: String,
}

#[doc = "A payment intent response."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct PaymentIntent {
    #[doc = "The client secret is used for client-side retrieval using a publishable key. The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret."]
    client_secret: String,
}

#[doc = "A payment method."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct PaymentMethod {
    #[doc = "The billing info for the payment method."]
    billing_info: BillingInfo,
    #[doc = "The card, if it is one. For our purposes, this is the only type of payment method that we support."]
    card: Card,
    #[doc = "Time at which the object was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "Unique identifier for the object."]
    id: String,
    #[doc = "Set of key-value pairs."]
    metadata: std::collections::HashMap<String, String>,
    #[doc = "The type of payment method."]
    #[serde(rename = "type")]
    type_: Type,
}

#[doc = "Card checks."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct PaymentMethodCardChecks {
    #[doc = "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."]
    #[serde(rename = "address_line1_check")]
    address_line_1_check: String,
    #[doc = "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."]
    address_postal_code_check: String,
    #[doc = "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."]
    cvc_check: String,
}

#[doc = "An enum representing the possible values of an `PaymentMethod`'s `type` field."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum PaymentMethodType {
    #[serde(rename = "card")]
    #[display("card")]
    Card,
}

impl Default for PaymentMethodType {
    fn default() -> Self {
        PaymentMethodType::Card
    }
}

#[doc = "Available plugins per type.\n\n**Note**: Only unmanaged (V1) plugins are included in this list. V1 plugins are \\\"lazily\\\" loaded, and are not returned in this list if there is no resource using the plugin."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct PluginsInfo {
    #[doc = "Names of available authorization plugins."]
    authorization: Vec<String>,
    #[doc = "Names of available logging-drivers, and logging-driver plugins."]
    log: Vec<String>,
    #[doc = "Names of available network-drivers, and network-driver plugins."]
    network: Vec<String>,
    #[doc = "Names of available volume-drivers, and network-driver plugins."]
    volume: Vec<String>,
}

#[doc = "The response from the `/ping` endpoint."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Pong {
    #[doc = "The pong response."]
    message: String,
}

#[doc = "RegistryServiceConfig stores daemon registry services configuration."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct RegistryServiceConfig {
    #[doc = "List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.\n\n**Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts."]
    allow_nondistributable_artifacts_cid_rs: Vec<String>,
    #[doc = "List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.\n\n**Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts."]
    allow_nondistributable_artifacts_hostnames: Vec<String>,
    index_configs: std::collections::HashMap<String, IndexInfo>,
    #[doc = "List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.\n\n**Warning**: Using this option can be useful when running a local  registry, but introduces security vulnerabilities. This option should therefore ONLY be used for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option."]
    insecure_registry_cid_rs: Vec<String>,
    #[doc = "List of registry URLs that act as a mirror for the official (`docker.io`) registry."]
    mirrors: Vec<String>,
}

#[doc = "Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Runtime {
    #[doc = "Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result."]
    path: String,
    #[doc = "List of command-line arguments to pass to the runtime when invoked."]
    runtime_args: Vec<String>,
}

#[doc = "An authentication session.\n\nFor our UIs, these are automatically created by Next.js."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Session {
    #[doc = "The date and time the session was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The date and time the session expires."]
    expires: chrono::DateTime<chrono::Utc>,
    #[doc = "The unique identifier for the session."]
    id: String,
    #[doc = "The session token."]
    session_token: SessionToken,
    #[doc = "The date and time the session was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user that the session belongs to."]
    user_id: String,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum SystemInfoCgroupDriverEnum {
    #[serde(rename = "cgroupfs")]
    #[display("cgroupfs")]
    Cgroupfs,
    #[serde(rename = "systemd")]
    #[display("systemd")]
    Systemd,
    #[serde(rename = "none")]
    #[display("none")]
    None,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum SystemInfoCgroupVersionEnum {
    #[serde(rename = "1")]
    #[display("1")]
    One,
    #[serde(rename = "2")]
    #[display("2")]
    Two,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct SystemInfoDefaultAddressPools {
    #[doc = "The network address in CIDR format"]
    base: String,
    #[doc = "The network pool size"]
    size: i64,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum SystemInfoIsolationEnum {
    #[serde(rename = "default")]
    #[display("default")]
    Default,
    #[serde(rename = "hyperv")]
    #[display("hyperv")]
    Hyperv,
    #[serde(rename = "process")]
    #[display("process")]
    Process,
}

#[doc = "A unit conversion."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct UnitConversion {
    #[doc = "The time and date the unit conversion was completed."]
    completed_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The time and date the unit conversion was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The error the function returned, if any."]
    error: String,
    #[doc = "The unique identifier of the unit conversion.\n\nThis is the same as the API call ID."]
    id: Id,
    #[doc = "The input value."]
    input: f64,
    #[doc = "The resulting value."]
    output: f64,
    #[doc = "The output format of the unit conversion."]
    output_format: OutputFormat,
    #[doc = "The source format of the unit conversion."]
    src_format: SrcFormat,
    #[doc = "The time and date the unit conversion was started."]
    started_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The status of the unit conversion."]
    status: Status,
    #[doc = "The time and date the unit conversion was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user ID of the user who created the unit conversion."]
    user_id: String,
}

#[doc = "The valid types of metric unit formats."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum UnitMetricFormat {
    #[serde(rename = "atto")]
    #[display("atto")]
    Atto,
    #[serde(rename = "femto")]
    #[display("femto")]
    Femto,
    #[serde(rename = "pico")]
    #[display("pico")]
    Pico,
    #[serde(rename = "nano")]
    #[display("nano")]
    Nano,
    #[serde(rename = "micro")]
    #[display("micro")]
    Micro,
    #[serde(rename = "milli")]
    #[display("milli")]
    Milli,
    #[serde(rename = "centi")]
    #[display("centi")]
    Centi,
    #[serde(rename = "deci")]
    #[display("deci")]
    Deci,
    #[serde(rename = "metric_unit")]
    #[display("metric_unit")]
    MetricUnit,
    #[serde(rename = "deca")]
    #[display("deca")]
    Deca,
    #[serde(rename = "hecto")]
    #[display("hecto")]
    Hecto,
    #[serde(rename = "kilo")]
    #[display("kilo")]
    Kilo,
    #[serde(rename = "mega")]
    #[display("mega")]
    Mega,
    #[serde(rename = "giga")]
    #[display("giga")]
    Giga,
    #[serde(rename = "tera")]
    #[display("tera")]
    Tera,
    #[serde(rename = "peta")]
    #[display("peta")]
    Peta,
    #[serde(rename = "exa")]
    #[display("exa")]
    Exa,
}

#[doc = "The user-modifiable parts of a User."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct UpdateUser {
    #[doc = "The user's company."]
    company: String,
    #[doc = "The user's Discord handle."]
    discord: String,
    #[doc = "The user's first name."]
    first_name: String,
    #[doc = "The user's GitHub handle."]
    github: String,
    #[doc = "The user's last name."]
    last_name: String,
    #[doc = "The user's phone number."]
    phone: String,
}

#[doc = "A user."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct User {
    #[doc = "The user's company."]
    company: String,
    #[doc = "The date and time the user was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's Discord handle."]
    discord: String,
    #[doc = "The email address of the user."]
    email: String,
    #[doc = "The date and time the email address was verified."]
    email_verified: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's first name."]
    first_name: String,
    #[doc = "The user's GitHub handle."]
    github: String,
    #[doc = "The unique identifier for the user."]
    id: String,
    #[doc = "The image avatar for the user. This is a URL."]
    image: url::Url,
    #[doc = "The user's last name."]
    last_name: String,
    #[doc = "The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields."]
    name: String,
    #[doc = "The user's phone number."]
    phone: String,
    #[doc = "The date and time the user was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct UserResultsPage {
    #[doc = "list of items on this page of results"]
    items: Vec<User>,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "A verification token for a user.\n\nThis is typically used to verify a user's email address."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct VerificationToken {
    #[doc = "The date and time the verification token was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The date and time the verification token expires."]
    expires: chrono::DateTime<chrono::Utc>,
    #[doc = "The token used for verification. This is used as the id for the table since it is unique per record."]
    id: String,
    #[doc = "The identifier for the user. This is typically the user's email address since that is what we are verifying."]
    identifier: String,
    #[doc = "The date and time the verification token was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
}
