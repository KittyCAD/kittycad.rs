#[doc = "An account provider."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum AccountProvider {
    #[serde(rename = "google")]
    #[display("google")]
    Google,
    #[serde(rename = "github")]
    #[display("github")]
    Github,
}

#[doc = "A response for a query on the API call table that is grouped by something."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiCallQueryGroup {
    count: i64,
    query: String,
}

#[doc = "The field of an API call to group by."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum ApiCallQueryGroupBy {
    #[serde(rename = "email")]
    #[display("email")]
    Email,
    #[serde(rename = "method")]
    #[display("method")]
    Method,
    #[serde(rename = "endpoint")]
    #[display("endpoint")]
    Endpoint,
    #[serde(rename = "user_id")]
    #[display("user_id")]
    UserId,
    #[serde(rename = "origin")]
    #[display("origin")]
    Origin,
    #[serde(rename = "ip_address")]
    #[display("ip_address")]
    IpAddress,
}

#[doc = "The status of an async API call."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum ApiCallStatus {
    Queued,
    Uploaded,
    #[serde(rename = "In Progress")]
    #[display("In Progress")]
    InProgress,
    Completed,
    Failed,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiCallWithPriceResultsPage {
    #[doc = "list of items on this page of results"]
    items: ApiCallWithPrice,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ApiTokenResultsPage {
    #[doc = "list of items on this page of results"]
    items: ApiToken,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct AsyncApiCallResultsPage {
    #[doc = "list of items on this page of results"]
    items: AsyncApiCall,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "The type of async API call."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum AsyncApiCallType {
    FileConversion,
    FileVolume,
    FileMass,
    FileDensity,
}

#[doc = "Metadata about our cache.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct CacheMetadata {
    #[doc = "If the cache returned an ok response from ping."]
    ok: bool,
}

#[doc = "The language code is written in."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum CodeLanguage {
    #[serde(rename = "go")]
    #[display("go")]
    Go,
    #[serde(rename = "python")]
    #[display("python")]
    Python,
    #[serde(rename = "node")]
    #[display("node")]
    Node,
}

#[doc = "Output of the code being executed."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct CodeOutput {
    #[doc = "The contents of the files requested if they were passed."]
    output_files: OutputFile,
    #[doc = "The stderr of the code."]
    stderr: String,
    #[doc = "The stdout of the code."]
    stdout: String,
}

#[doc = "Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Commit {
    #[doc = "Commit ID of external tool expected by dockerd as set at build time."]
    expected: String,
    #[doc = "Actual commit ID of external tool."]
    id: String,
}

#[doc = "Supported set of sort modes for scanning by created_at only.\n\nCurrently, we only support scanning in ascending order."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum CreatedAtSortMode {
    #[serde(rename = "created-at-ascending")]
    #[display("created-at-ascending")]
    CreatedAtAscending,
    #[serde(rename = "created-at-descending")]
    #[display("created-at-descending")]
    CreatedAtDescending,
}

#[doc = "Currency is the list of supported currencies.\n\nFor more details see <https://support.stripe.com/questions/which-currencies-does-stripe-support>."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Currency {
    #[serde(rename = "aed")]
    #[display("aed")]
    Aed,
    #[serde(rename = "afn")]
    #[display("afn")]
    Afn,
    #[serde(rename = "all")]
    #[display("all")]
    All,
    #[serde(rename = "amd")]
    #[display("amd")]
    Amd,
    #[serde(rename = "ang")]
    #[display("ang")]
    Ang,
    #[serde(rename = "aoa")]
    #[display("aoa")]
    Aoa,
    #[serde(rename = "ars")]
    #[display("ars")]
    Ars,
    #[serde(rename = "aud")]
    #[display("aud")]
    Aud,
    #[serde(rename = "awg")]
    #[display("awg")]
    Awg,
    #[serde(rename = "azn")]
    #[display("azn")]
    Azn,
    #[serde(rename = "bam")]
    #[display("bam")]
    Bam,
    #[serde(rename = "bbd")]
    #[display("bbd")]
    Bbd,
    #[serde(rename = "bdt")]
    #[display("bdt")]
    Bdt,
    #[serde(rename = "bgn")]
    #[display("bgn")]
    Bgn,
    #[serde(rename = "bif")]
    #[display("bif")]
    Bif,
    #[serde(rename = "bmd")]
    #[display("bmd")]
    Bmd,
    #[serde(rename = "bnd")]
    #[display("bnd")]
    Bnd,
    #[serde(rename = "bob")]
    #[display("bob")]
    Bob,
    #[serde(rename = "brl")]
    #[display("brl")]
    Brl,
    #[serde(rename = "bsd")]
    #[display("bsd")]
    Bsd,
    #[serde(rename = "bwp")]
    #[display("bwp")]
    Bwp,
    #[serde(rename = "bzd")]
    #[display("bzd")]
    Bzd,
    #[serde(rename = "cad")]
    #[display("cad")]
    Cad,
    #[serde(rename = "cdf")]
    #[display("cdf")]
    Cdf,
    #[serde(rename = "chf")]
    #[display("chf")]
    Chf,
    #[serde(rename = "clp")]
    #[display("clp")]
    Clp,
    #[serde(rename = "cny")]
    #[display("cny")]
    Cny,
    #[serde(rename = "cop")]
    #[display("cop")]
    Cop,
    #[serde(rename = "crc")]
    #[display("crc")]
    Crc,
    #[serde(rename = "cve")]
    #[display("cve")]
    Cve,
    #[serde(rename = "czk")]
    #[display("czk")]
    Czk,
    #[serde(rename = "djf")]
    #[display("djf")]
    Djf,
    #[serde(rename = "dkk")]
    #[display("dkk")]
    Dkk,
    #[serde(rename = "dop")]
    #[display("dop")]
    Dop,
    #[serde(rename = "dzd")]
    #[display("dzd")]
    Dzd,
    #[serde(rename = "eek")]
    #[display("eek")]
    Eek,
    #[serde(rename = "egp")]
    #[display("egp")]
    Egp,
    #[serde(rename = "etb")]
    #[display("etb")]
    Etb,
    #[serde(rename = "eur")]
    #[display("eur")]
    Eur,
    #[serde(rename = "fjd")]
    #[display("fjd")]
    Fjd,
    #[serde(rename = "fkp")]
    #[display("fkp")]
    Fkp,
    #[serde(rename = "gbp")]
    #[display("gbp")]
    Gbp,
    #[serde(rename = "gel")]
    #[display("gel")]
    Gel,
    #[serde(rename = "gip")]
    #[display("gip")]
    Gip,
    #[serde(rename = "gmd")]
    #[display("gmd")]
    Gmd,
    #[serde(rename = "gnf")]
    #[display("gnf")]
    Gnf,
    #[serde(rename = "gtq")]
    #[display("gtq")]
    Gtq,
    #[serde(rename = "gyd")]
    #[display("gyd")]
    Gyd,
    #[serde(rename = "hkd")]
    #[display("hkd")]
    Hkd,
    #[serde(rename = "hnl")]
    #[display("hnl")]
    Hnl,
    #[serde(rename = "hrk")]
    #[display("hrk")]
    Hrk,
    #[serde(rename = "htg")]
    #[display("htg")]
    Htg,
    #[serde(rename = "huf")]
    #[display("huf")]
    Huf,
    #[serde(rename = "idr")]
    #[display("idr")]
    Idr,
    #[serde(rename = "ils")]
    #[display("ils")]
    Ils,
    #[serde(rename = "inr")]
    #[display("inr")]
    Inr,
    #[serde(rename = "isk")]
    #[display("isk")]
    Isk,
    #[serde(rename = "jmd")]
    #[display("jmd")]
    Jmd,
    #[serde(rename = "jpy")]
    #[display("jpy")]
    Jpy,
    #[serde(rename = "kes")]
    #[display("kes")]
    Kes,
    #[serde(rename = "kgs")]
    #[display("kgs")]
    Kgs,
    #[serde(rename = "khr")]
    #[display("khr")]
    Khr,
    #[serde(rename = "kmf")]
    #[display("kmf")]
    Kmf,
    #[serde(rename = "krw")]
    #[display("krw")]
    Krw,
    #[serde(rename = "kyd")]
    #[display("kyd")]
    Kyd,
    #[serde(rename = "kzt")]
    #[display("kzt")]
    Kzt,
    #[serde(rename = "lak")]
    #[display("lak")]
    Lak,
    #[serde(rename = "lbp")]
    #[display("lbp")]
    Lbp,
    #[serde(rename = "lkr")]
    #[display("lkr")]
    Lkr,
    #[serde(rename = "lrd")]
    #[display("lrd")]
    Lrd,
    #[serde(rename = "lsl")]
    #[display("lsl")]
    Lsl,
    #[serde(rename = "ltl")]
    #[display("ltl")]
    Ltl,
    #[serde(rename = "lvl")]
    #[display("lvl")]
    Lvl,
    #[serde(rename = "mad")]
    #[display("mad")]
    Mad,
    #[serde(rename = "mdl")]
    #[display("mdl")]
    Mdl,
    #[serde(rename = "mga")]
    #[display("mga")]
    Mga,
    #[serde(rename = "mkd")]
    #[display("mkd")]
    Mkd,
    #[serde(rename = "mnt")]
    #[display("mnt")]
    Mnt,
    #[serde(rename = "mop")]
    #[display("mop")]
    Mop,
    #[serde(rename = "mro")]
    #[display("mro")]
    Mro,
    #[serde(rename = "mur")]
    #[display("mur")]
    Mur,
    #[serde(rename = "mvr")]
    #[display("mvr")]
    Mvr,
    #[serde(rename = "mwk")]
    #[display("mwk")]
    Mwk,
    #[serde(rename = "mxn")]
    #[display("mxn")]
    Mxn,
    #[serde(rename = "myr")]
    #[display("myr")]
    Myr,
    #[serde(rename = "mzn")]
    #[display("mzn")]
    Mzn,
    #[serde(rename = "nad")]
    #[display("nad")]
    Nad,
    #[serde(rename = "ngn")]
    #[display("ngn")]
    Ngn,
    #[serde(rename = "nio")]
    #[display("nio")]
    Nio,
    #[serde(rename = "nok")]
    #[display("nok")]
    Nok,
    #[serde(rename = "npr")]
    #[display("npr")]
    Npr,
    #[serde(rename = "nzd")]
    #[display("nzd")]
    Nzd,
    #[serde(rename = "pab")]
    #[display("pab")]
    Pab,
    #[serde(rename = "pen")]
    #[display("pen")]
    Pen,
    #[serde(rename = "pgk")]
    #[display("pgk")]
    Pgk,
    #[serde(rename = "php")]
    #[display("php")]
    Php,
    #[serde(rename = "pkr")]
    #[display("pkr")]
    Pkr,
    #[serde(rename = "pln")]
    #[display("pln")]
    Pln,
    #[serde(rename = "pyg")]
    #[display("pyg")]
    Pyg,
    #[serde(rename = "qar")]
    #[display("qar")]
    Qar,
    #[serde(rename = "ron")]
    #[display("ron")]
    Ron,
    #[serde(rename = "rsd")]
    #[display("rsd")]
    Rsd,
    #[serde(rename = "rub")]
    #[display("rub")]
    Rub,
    #[serde(rename = "rwf")]
    #[display("rwf")]
    Rwf,
    #[serde(rename = "sar")]
    #[display("sar")]
    Sar,
    #[serde(rename = "sbd")]
    #[display("sbd")]
    Sbd,
    #[serde(rename = "scr")]
    #[display("scr")]
    Scr,
    #[serde(rename = "sek")]
    #[display("sek")]
    Sek,
    #[serde(rename = "sgd")]
    #[display("sgd")]
    Sgd,
    #[serde(rename = "shp")]
    #[display("shp")]
    Shp,
    #[serde(rename = "sll")]
    #[display("sll")]
    Sll,
    #[serde(rename = "sos")]
    #[display("sos")]
    Sos,
    #[serde(rename = "srd")]
    #[display("srd")]
    Srd,
    #[serde(rename = "std")]
    #[display("std")]
    Std,
    #[serde(rename = "svc")]
    #[display("svc")]
    Svc,
    #[serde(rename = "szl")]
    #[display("szl")]
    Szl,
    #[serde(rename = "thb")]
    #[display("thb")]
    Thb,
    #[serde(rename = "tjs")]
    #[display("tjs")]
    Tjs,
    #[serde(rename = "top")]
    #[display("top")]
    Top,
    #[serde(rename = "try")]
    #[display("try")]
    Try,
    #[serde(rename = "ttd")]
    #[display("ttd")]
    Ttd,
    #[serde(rename = "twd")]
    #[display("twd")]
    Twd,
    #[serde(rename = "tzs")]
    #[display("tzs")]
    Tzs,
    #[serde(rename = "uah")]
    #[display("uah")]
    Uah,
    #[serde(rename = "ugx")]
    #[display("ugx")]
    Ugx,
    #[serde(rename = "usd")]
    #[display("usd")]
    Usd,
    #[serde(rename = "uyu")]
    #[display("uyu")]
    Uyu,
    #[serde(rename = "uzs")]
    #[display("uzs")]
    Uzs,
    #[serde(rename = "vef")]
    #[display("vef")]
    Vef,
    #[serde(rename = "vnd")]
    #[display("vnd")]
    Vnd,
    #[serde(rename = "vuv")]
    #[display("vuv")]
    Vuv,
    #[serde(rename = "wst")]
    #[display("wst")]
    Wst,
    #[serde(rename = "xaf")]
    #[display("xaf")]
    Xaf,
    #[serde(rename = "xcd")]
    #[display("xcd")]
    Xcd,
    #[serde(rename = "xof")]
    #[display("xof")]
    Xof,
    #[serde(rename = "xpf")]
    #[display("xpf")]
    Xpf,
    #[serde(rename = "yer")]
    #[display("yer")]
    Yer,
    #[serde(rename = "zar")]
    #[display("zar")]
    Zar,
    #[serde(rename = "zmw")]
    #[display("zmw")]
    Zmw,
}

#[doc = "The request parameters for the OAuth 2.0 Device Authorization Grant flow."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct DeviceAuthRequestForm {
    #[doc = "The client ID."]
    client_id: uuid::Uuid,
}

#[doc = "The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct DeviceAuthVerifyParams {
    #[doc = "The user code."]
    user_code: String,
}

#[doc = "The body of the form for email authentication."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct EmailAuthenticationForm {
    #[doc = "The URL to redirect back to after we have authenticated."]
    callback_url: url::Url,
    #[doc = "The user's email."]
    email: String,
}

#[doc = "The environment the server is running in."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Environment {
    #[serde(rename = "DEVELOPMENT")]
    #[display("DEVELOPMENT")]
    Development,
    #[serde(rename = "PREVIEW")]
    #[display("PREVIEW")]
    Preview,
    #[serde(rename = "PRODUCTION")]
    #[display("PRODUCTION")]
    Production,
}

#[doc = "Error information from a response."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Error {
    error_code: String,
    message: String,
    request_id: String,
}

#[doc = "Extended user information.\n\nThis is mostly used for internal purposes. It returns a mapping of the user's information, including that of our third party services we use for users: MailChimp, Stripe, and Zendesk."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ExtendedUser {
    #[doc = "The user's company."]
    company: String,
    #[doc = "The date and time the user was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's Discord handle."]
    discord: String,
    #[doc = "The email address of the user."]
    email: String,
    #[doc = "The date and time the email address was verified."]
    email_verified: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's first name."]
    first_name: String,
    #[doc = "The user's GitHub handle."]
    github: String,
    #[doc = "The unique identifier for the user."]
    id: String,
    #[doc = "The image avatar for the user. This is a URL."]
    image: url::Url,
    #[doc = "The user's last name."]
    last_name: String,
    #[doc = "The user's MailChimp ID. This is mostly used for internal mapping."]
    mailchimp_id: String,
    #[doc = "The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields."]
    name: String,
    #[doc = "The user's phone number."]
    phone: String,
    #[doc = "The user's Stripe ID. This is mostly used for internal mapping."]
    stripe_id: String,
    #[doc = "The date and time the user was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's Zendesk ID. This is mostly used for internal mapping."]
    zendesk_id: String,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct ExtendedUserResultsPage {
    #[doc = "list of items on this page of results"]
    items: ExtendedUser,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "The valid types of output file formats."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum FileOutputFormat {
    #[serde(rename = "stl")]
    #[display("stl")]
    Stl,
    #[serde(rename = "obj")]
    #[display("obj")]
    Obj,
    #[serde(rename = "dae")]
    #[display("dae")]
    Dae,
    #[serde(rename = "step")]
    #[display("step")]
    Step,
    #[serde(rename = "fbx")]
    #[display("fbx")]
    Fbx,
    #[serde(rename = "fbxb")]
    #[display("fbxb")]
    Fbxb,
}

#[doc = "The valid types of source file formats."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum FileSourceFormat {
    #[serde(rename = "stl")]
    #[display("stl")]
    Stl,
    #[serde(rename = "obj")]
    #[display("obj")]
    Obj,
    #[serde(rename = "dae")]
    #[display("dae")]
    Dae,
    #[serde(rename = "step")]
    #[display("step")]
    Step,
    #[serde(rename = "fbx")]
    #[display("fbx")]
    Fbx,
}

#[doc = "Metadata about our file system.\n\nThis is mostly used for internal purposes and debugging."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct FileSystemMetadata {
    #[doc = "If the file system passed a sanity check."]
    ok: bool,
}

#[doc = "Gateway information."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Gateway {
    #[doc = "The auth timeout of the gateway."]
    auth_timeout: i64,
    #[doc = "The host of the gateway."]
    host: String,
    #[doc = "The name of the gateway."]
    name: String,
    #[doc = "The port of the gateway."]
    port: i64,
    #[doc = "The TLS timeout for the gateway."]
    tls_timeout: i64,
}

#[doc = "An enum representing the possible values of an `Invoice`'s `status` field."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum InvoiceStatus {
    #[serde(rename = "deleted")]
    #[display("deleted")]
    Deleted,
    #[serde(rename = "draft")]
    #[display("draft")]
    Draft,
    #[serde(rename = "open")]
    #[display("open")]
    Open,
    #[serde(rename = "paid")]
    #[display("paid")]
    Paid,
    #[serde(rename = "uncollectible")]
    #[display("uncollectible")]
    Uncollectible,
    #[serde(rename = "void")]
    #[display("void")]
    Void,
}

#[doc = "Jetstream API statistics."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct JetstreamApiStats {
    #[doc = "The number of errors."]
    errors: i64,
    #[doc = "The number of inflight requests."]
    inflight: i64,
    #[doc = "The number of requests."]
    total: i64,
}

#[doc = "Jetstream configuration."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct JetstreamConfig {
    #[doc = "The domain."]
    domain: String,
    #[doc = "The max memory."]
    max_memory: i64,
    #[doc = "The max storage."]
    max_storage: i64,
    #[doc = "The store directory."]
    store_dir: String,
}

#[doc = "Leaf node information."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct LeafNode {
    #[doc = "The auth timeout of the leaf node."]
    auth_timeout: i64,
    #[doc = "The host of the leaf node."]
    host: String,
    #[doc = "The port of the leaf node."]
    port: i64,
    #[doc = "The TLS timeout for the leaf node."]
    tls_timeout: i64,
}

#[doc = "Jetstream statistics."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct MetaClusterInfo {
    #[doc = "The size of the cluster."]
    cluster_size: i64,
    #[doc = "The leader of the cluster."]
    leader: String,
    #[doc = "The name of the cluster."]
    name: String,
}

#[doc = "The Request Method (VERB)\n\nThis type also contains constants for a number of common HTTP methods such as GET, POST, etc.\n\nCurrently includes 8 variants representing the 8 methods defined in [RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an Extension variant for all extensions."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Method {
    #[serde(rename = "OPTIONS")]
    #[display("OPTIONS")]
    Options,
    #[serde(rename = "GET")]
    #[display("GET")]
    Get,
    #[serde(rename = "POST")]
    #[display("POST")]
    Post,
    #[serde(rename = "PUT")]
    #[display("PUT")]
    Put,
    #[serde(rename = "DELETE")]
    #[display("DELETE")]
    Delete,
    #[serde(rename = "HEAD")]
    #[display("HEAD")]
    Head,
    #[serde(rename = "TRACE")]
    #[display("TRACE")]
    Trace,
    #[serde(rename = "CONNECT")]
    #[display("CONNECT")]
    Connect,
    #[serde(rename = "PATCH")]
    #[display("PATCH")]
    Patch,
    #[serde(rename = "EXTENSION")]
    #[display("EXTENSION")]
    Extension,
}

#[doc = "Information about an OAuth 2.0 client."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Oauth2ClientInfo {
    #[doc = "Value used for [CSRF](https://tools.ietf.org/html/rfc6749#section-10.12) protection via the `state` parameter."]
    csrf_token: String,
    #[doc = "Code Verifier used for [PKCE]((https://tools.ietf.org/html/rfc7636)) protection via the `code_verifier` parameter. The value must have a minimum length of 43 characters and a maximum length of 128 characters.  Each character must be ASCII alphanumeric or one of the characters \"-\" / \".\" / \"_\" / \"~\"."]
    pkce_code_verifier: String,
    #[doc = "The URL for consent."]
    url: String,
}

#[doc = "An OAuth 2.0 Grant Type. These are documented here: <https://oauth.net/2/grant-types/>."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum Oauth2GrantType {
    #[serde(rename = "urn:ietf:params:oauth:grant-type:device_code")]
    #[display("urn:ietf:params:oauth:grant-type:device_code")]
    UrnIetfParamsOauthGrantTypeDeviceCode,
}

impl Default for Oauth2GrantType {
    fn default() -> Self {
        Oauth2GrantType::UrnIetfParamsOauthGrantTypeDeviceCode
    }
}

#[doc = "Output file contents."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct OutputFile {
    #[doc = "The contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON."]
    contents: String,
    #[doc = "The name of the file."]
    name: String,
}

#[doc = "A payment intent response."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct PaymentIntent {
    #[doc = "The client secret is used for client-side retrieval using a publishable key. The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret."]
    client_secret: String,
}

#[doc = "Card checks."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct PaymentMethodCardChecks {
    #[doc = "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."]
    #[serde(rename = "address_line1_check")]
    address_line_1_check: String,
    #[doc = "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."]
    address_postal_code_check: String,
    #[doc = "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."]
    cvc_check: String,
}

#[doc = "An enum representing the possible values of an `PaymentMethod`'s `type` field."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum PaymentMethodType {
    #[serde(rename = "card")]
    #[display("card")]
    Card,
}

impl Default for PaymentMethodType {
    fn default() -> Self {
        PaymentMethodType::Card
    }
}

#[doc = "The response from the `/ping` endpoint."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct Pong {
    #[doc = "The pong response."]
    message: String,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum SystemInfoCgroupDriverEnum {
    #[serde(rename = "cgroupfs")]
    #[display("cgroupfs")]
    Cgroupfs,
    #[serde(rename = "systemd")]
    #[display("systemd")]
    Systemd,
    #[serde(rename = "none")]
    #[display("none")]
    None,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum SystemInfoCgroupVersionEnum {
    #[serde(rename = "1")]
    #[display("1")]
    One,
    #[serde(rename = "2")]
    #[display("2")]
    Two,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct SystemInfoDefaultAddressPools {
    #[doc = "The network address in CIDR format"]
    base: String,
    #[doc = "The network pool size"]
    size: i64,
}

#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum SystemInfoIsolationEnum {
    #[serde(rename = "default")]
    #[display("default")]
    Default,
    #[serde(rename = "hyperv")]
    #[display("hyperv")]
    Hyperv,
    #[serde(rename = "process")]
    #[display("process")]
    Process,
}

#[doc = "The valid types of metric unit formats."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
    clap :: ValueEnum,
    parse_display :: FromStr,
    parse_display :: Display,
)]
pub enum UnitMetricFormat {
    #[serde(rename = "atto")]
    #[display("atto")]
    Atto,
    #[serde(rename = "femto")]
    #[display("femto")]
    Femto,
    #[serde(rename = "pico")]
    #[display("pico")]
    Pico,
    #[serde(rename = "nano")]
    #[display("nano")]
    Nano,
    #[serde(rename = "micro")]
    #[display("micro")]
    Micro,
    #[serde(rename = "milli")]
    #[display("milli")]
    Milli,
    #[serde(rename = "centi")]
    #[display("centi")]
    Centi,
    #[serde(rename = "deci")]
    #[display("deci")]
    Deci,
    #[serde(rename = "metric_unit")]
    #[display("metric_unit")]
    MetricUnit,
    #[serde(rename = "deca")]
    #[display("deca")]
    Deca,
    #[serde(rename = "hecto")]
    #[display("hecto")]
    Hecto,
    #[serde(rename = "kilo")]
    #[display("kilo")]
    Kilo,
    #[serde(rename = "mega")]
    #[display("mega")]
    Mega,
    #[serde(rename = "giga")]
    #[display("giga")]
    Giga,
    #[serde(rename = "tera")]
    #[display("tera")]
    Tera,
    #[serde(rename = "peta")]
    #[display("peta")]
    Peta,
    #[serde(rename = "exa")]
    #[display("exa")]
    Exa,
}

#[doc = "The user-modifiable parts of a User."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct UpdateUser {
    #[doc = "The user's company."]
    company: String,
    #[doc = "The user's Discord handle."]
    discord: String,
    #[doc = "The user's first name."]
    first_name: String,
    #[doc = "The user's GitHub handle."]
    github: String,
    #[doc = "The user's last name."]
    last_name: String,
    #[doc = "The user's phone number."]
    phone: String,
}

#[doc = "A user."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct User {
    #[doc = "The user's company."]
    company: String,
    #[doc = "The date and time the user was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's Discord handle."]
    discord: String,
    #[doc = "The email address of the user."]
    email: String,
    #[doc = "The date and time the email address was verified."]
    email_verified: chrono::DateTime<chrono::Utc>,
    #[doc = "The user's first name."]
    first_name: String,
    #[doc = "The user's GitHub handle."]
    github: String,
    #[doc = "The unique identifier for the user."]
    id: String,
    #[doc = "The image avatar for the user. This is a URL."]
    image: url::Url,
    #[doc = "The user's last name."]
    last_name: String,
    #[doc = "The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields."]
    name: String,
    #[doc = "The user's phone number."]
    phone: String,
    #[doc = "The date and time the user was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
}

#[doc = "A single page of results"]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct UserResultsPage {
    #[doc = "list of items on this page of results"]
    items: User,
    #[doc = "token used to fetch the next page of results (if any)"]
    next_page: String,
}

#[doc = "A verification token for a user.\n\nThis is typically used to verify a user's email address."]
#[derive(
    serde :: Serialize,
    serde :: Deserialize,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Clone,
    schemars :: JsonSchema,
    tabled :: Tabled,
)]
pub struct VerificationToken {
    #[doc = "The date and time the verification token was created."]
    created_at: chrono::DateTime<chrono::Utc>,
    #[doc = "The date and time the verification token expires."]
    expires: chrono::DateTime<chrono::Utc>,
    #[doc = "The token used for verification. This is used as the id for the table since it is unique per record."]
    id: String,
    #[doc = "The identifier for the user. This is typically the user's email address since that is what we are verifying."]
    identifier: String,
    #[doc = "The date and time the verification token was last updated."]
    updated_at: chrono::DateTime<chrono::Utc>,
}
